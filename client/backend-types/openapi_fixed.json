{
  "openapi": "3.1.0",
  "info": {
    "title": "WorklowAI",
    "description": "Structured AI workflows",
    "version": "0.1.0"
  },
  "paths": {
    "/v1/{tenant}/agents/{task_id}/schemas/{task_schema_id}/run": {
      "post": {
        "tags": ["Run"],
        "summary": "Run Task",
        "operationId": "run_task_v1__tenant__agents__task_id__schemas__task_schema_id__run_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "The id of the task",
              "name": "task_id"
            }
          },
          {
            "name": "task_schema_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "The id of the task schema",
              "name": "task_schema_id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RunRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "title": "Id",
                      "type": "string"
                    },
                    "task_output": {
                      "title": "Task Output",
                      "type": "object"
                    },
                    "tool_call_requests": {
                      "anyOf": [
                        {
                          "items": {
                            "$ref": "#/components/schemas/APIToolCallRequest"
                          },
                          "type": "array"
                        },
                        {
                          "type": "null"
                        }
                      ],
                      "description": "Tool calls that should be executed client side.",
                      "title": "Tool Call Requests"
                    },
                    "reasoning_steps": {
                      "anyOf": [
                        {
                          "items": {
                            "$ref": "#/components/schemas/ReasoningStep"
                          },
                          "type": "array"
                        },
                        {
                          "type": "null"
                        }
                      ],
                      "description": "A list of reasoning steps that were taken during the run.Available for reasoning models or when the version used has chain of thoughts enabled",
                      "title": "Reasoning Steps"
                    },
                    "version": {
                      "$ref": "#/components/schemas/Version"
                    },
                    "duration_seconds": {
                      "anyOf": [
                        {
                          "type": "number"
                        },
                        {
                          "type": "null"
                        }
                      ],
                      "title": "Duration Seconds"
                    },
                    "cost_usd": {
                      "anyOf": [
                        {
                          "type": "number"
                        },
                        {
                          "type": "null"
                        }
                      ],
                      "title": "Cost Usd"
                    },
                    "metadata": {
                      "anyOf": [
                        {
                          "type": "object"
                        },
                        {
                          "type": "null"
                        }
                      ],
                      "title": "Metadata"
                    },
                    "tool_calls": {
                      "anyOf": [
                        {
                          "items": {
                            "$ref": "#/components/schemas/ToolCall"
                          },
                          "type": "array"
                        },
                        {
                          "type": "null"
                        }
                      ],
                      "description": "A list of tools that were executed during the run.",
                      "title": "Tool Calls"
                    }
                  },
                  "required": [
                    "id",
                    "task_output",
                    "tool_call_requests",
                    "reasoning_steps",
                    "version",
                    "duration_seconds",
                    "cost_usd",
                    "metadata",
                    "tool_calls"
                  ],
                  "title": "RunResponse",
                  "type": "object"
                }
              },
              "text/event-stream": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/RunResponseStreamChunk"
                    },
                    {
                      "$ref": "#/components/schemas/RunResponse"
                    }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{tenant}/agents/{task_id}/runs/{run_id}/reply": {
      "post": {
        "tags": ["Run"],
        "summary": "Reply To Run",
        "description": "Reply to a run. The tool use results or added message are appended to the messages of the requested run and a new run is triggered with the updated messages.",
        "operationId": "reply_to_run_v1__tenant__agents__task_id__runs__run_id__reply_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Run Id"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "The id of the task",
              "name": "task_id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RunReplyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "title": "Id",
                      "type": "string"
                    },
                    "task_output": {
                      "title": "Task Output",
                      "type": "object"
                    },
                    "tool_call_requests": {
                      "anyOf": [
                        {
                          "items": {
                            "$ref": "#/components/schemas/APIToolCallRequest"
                          },
                          "type": "array"
                        },
                        {
                          "type": "null"
                        }
                      ],
                      "description": "Tool calls that should be executed client side.",
                      "title": "Tool Call Requests"
                    },
                    "reasoning_steps": {
                      "anyOf": [
                        {
                          "items": {
                            "$ref": "#/components/schemas/ReasoningStep"
                          },
                          "type": "array"
                        },
                        {
                          "type": "null"
                        }
                      ],
                      "description": "A list of reasoning steps that were taken during the run.Available for reasoning models or when the version used has chain of thoughts enabled",
                      "title": "Reasoning Steps"
                    },
                    "version": {
                      "$ref": "#/components/schemas/Version"
                    },
                    "duration_seconds": {
                      "anyOf": [
                        {
                          "type": "number"
                        },
                        {
                          "type": "null"
                        }
                      ],
                      "title": "Duration Seconds"
                    },
                    "cost_usd": {
                      "anyOf": [
                        {
                          "type": "number"
                        },
                        {
                          "type": "null"
                        }
                      ],
                      "title": "Cost Usd"
                    },
                    "metadata": {
                      "anyOf": [
                        {
                          "type": "object"
                        },
                        {
                          "type": "null"
                        }
                      ],
                      "title": "Metadata"
                    },
                    "tool_calls": {
                      "anyOf": [
                        {
                          "items": {
                            "$ref": "#/components/schemas/ToolCall"
                          },
                          "type": "array"
                        },
                        {
                          "type": "null"
                        }
                      ],
                      "description": "A list of tools that were executed during the run.",
                      "title": "Tool Calls"
                    }
                  },
                  "required": [
                    "id",
                    "task_output",
                    "tool_call_requests",
                    "reasoning_steps",
                    "version",
                    "duration_seconds",
                    "cost_usd",
                    "metadata",
                    "tool_calls"
                  ],
                  "title": "RunResponse",
                  "type": "object"
                }
              },
              "text/event-stream": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/RunResponseStreamChunk"
                    },
                    {
                      "$ref": "#/components/schemas/RunResponse"
                    }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{tenant}/agents/{task_id}/schemas/{task_schema_id}/models": {
      "get": {
        "tags": ["Agent Schemas"],
        "summary": "List Models For Task Schema",
        "description": "List models for a task schema",
        "operationId": "list_models_for_task_schema_v1__tenant__agents__task_id__schemas__task_schema_id__models_get",
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Id"
            }
          },
          {
            "name": "task_schema_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Task Schema Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page_ModelResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Agent Schemas"],
        "summary": "List Models For Task Schema And Instructions",
        "description": "List models for a task schema and instructions",
        "operationId": "list_models_for_task_schema_and_instructions_v1__tenant__agents__task_id__schemas__task_schema_id__models_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Id"
            }
          },
          {
            "name": "task_schema_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Task Schema Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/ListModelsRequest"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page_ModelResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{tenant}/agents/{task_id}/schemas/{task_schema_id}/runs/search/fields": {
      "get": {
        "tags": ["Agent Schemas"],
        "summary": "List Task Runs Search Fields",
        "operationId": "list_task_runs_search_fields_v1__tenant__agents__task_id__schemas__task_schema_id__runs_search_fields_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_schema_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "The id of the task schema",
              "name": "task_schema_id"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "The id of the task",
              "name": "task_id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchFields"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{tenant}/agents/{task_id}/schemas/{task_schema_id}/instructions/check": {
      "post": {
        "tags": ["Agent Schemas"],
        "summary": "Check Instructions",
        "operationId": "check_instructions_v1__tenant__agents__task_id__schemas__task_schema_id__instructions_check_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Id"
            }
          },
          {
            "name": "task_schema_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Task Schema Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckInstructionsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckInstructionsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{tenant}/agents/{task_id}/schemas/{task_schema_id}/versions": {
      "post": {
        "tags": ["Versions"],
        "summary": "Create Version",
        "description": "Create a new version for a agent.The version can be used to run the agent but will not be returned in the list of versions until it is saved.",
        "operationId": "create_version_v1__tenant__agents__task_id__schemas__task_schema_id__versions_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "The id of the task",
              "name": "task_id"
            }
          },
          {
            "name": "task_schema_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "The id of the task schema",
              "name": "task_schema_id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVersionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateVersionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{tenant}/agents/{task_id}/versions/improve": {
      "post": {
        "tags": ["Versions"],
        "summary": "Improve Prompt",
        "description": "Improve the version properties by using a user evaluation of a given run. The run's version properties, input and outputs are used as context to generate new version properties.",
        "operationId": "improve_prompt_v1__tenant__agents__task_id__versions_improve_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "The id of the task",
              "name": "task_id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImproveVersionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "improved_properties": {
                      "$ref": "#/components/schemas/TaskGroupProperties"
                    },
                    "changelog": {
                      "anyOf": [
                        {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        {
                          "type": "null"
                        }
                      ],
                      "title": "Changelog"
                    }
                  },
                  "required": ["improved_properties", "changelog"],
                  "title": "ImproveVersionResponse",
                  "type": "object"
                }
              }
            },
            "text/event-stream": {
              "schema": {
                "properties": {
                  "improved_properties": {
                    "$ref": "#/components/schemas/TaskGroupProperties"
                  },
                  "changelog": {
                    "anyOf": [
                      {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Changelog"
                  }
                },
                "required": ["improved_properties", "changelog"],
                "title": "ImproveVersionResponse",
                "type": "object"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{tenant}/agents/{task_id}/versions": {
      "get": {
        "tags": ["Versions"],
        "summary": "List Versions",
        "description": "List versions for a agent. Versions are grouped by major version",
        "operationId": "list_versions_v1__tenant__agents__task_id__versions_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "The id of the task",
              "name": "task_id"
            }
          },
          {
            "name": "schema_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The schema id to filter versions by",
              "title": "Schema Id"
            },
            "description": "The schema id to filter versions by"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page_MajorVersion_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{tenant}/agents/{task_id}/versions/{version_id}": {
      "get": {
        "tags": ["Versions"],
        "summary": "Get Version",
        "description": "Get a version by hash or semver",
        "operationId": "get_version_v1__tenant__agents__task_id__versions__version_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "The id of the task",
              "name": "task_id"
            }
          },
          {
            "name": "version_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id of the version, either a semver or a hash",
              "title": "Version Id"
            },
            "description": "The id of the version, either a semver or a hash"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionV1"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{tenant}/agents/{task_id}/versions/{version_id}/save": {
      "post": {
        "tags": ["Versions"],
        "summary": "Save Version",
        "description": "Save a version for the agent. Saving will attribute a friendly ID to the version, e-g 10.1Saving a version that has already been saved is a no-op.",
        "operationId": "save_version_v1__tenant__agents__task_id__versions__version_id__save_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "The id of the task",
              "name": "task_id"
            }
          },
          {
            "name": "version_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id of the version to save, as returned when listing runs",
              "title": "Version Id"
            },
            "description": "The id of the version to save, as returned when listing runs"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateVersionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{tenant}/agents/{task_id}/versions/{version_id}/favorite": {
      "post": {
        "tags": ["Versions"],
        "summary": "Favorite Version",
        "description": "Favorite a version",
        "operationId": "favorite_version_v1__tenant__agents__task_id__versions__version_id__favorite_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "The id of the task",
              "name": "task_id"
            }
          },
          {
            "name": "version_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id of the version, either a semver or a hash",
              "title": "Version Id"
            },
            "description": "The id of the version, either a semver or a hash"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Versions"],
        "summary": "Unfavorite Version",
        "description": "Unfavorite a version",
        "operationId": "unfavorite_version_v1__tenant__agents__task_id__versions__version_id__favorite_delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "The id of the task",
              "name": "task_id"
            }
          },
          {
            "name": "version_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id of the version to unfavorite, as returned when listing runs",
              "title": "Version Id"
            },
            "description": "The id of the version to unfavorite, as returned when listing runs"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{tenant}/agents/{task_id}/versions/{version_id}/notes": {
      "patch": {
        "tags": ["Versions"],
        "summary": "Update Version Notes",
        "description": "Update the notes for a version",
        "operationId": "update_version_notes_v1__tenant__agents__task_id__versions__version_id__notes_patch",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "The id of the task",
              "name": "task_id"
            }
          },
          {
            "name": "version_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id of the version, either a semver or a hash",
              "title": "Version Id"
            },
            "description": "The id of the version, either a semver or a hash"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVersionNotesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{tenant}/agents/{task_id}/runs/search": {
      "post": {
        "tags": ["Runs"],
        "summary": "Search Runs",
        "operationId": "search_runs_v1__tenant__agents__task_id__runs_search_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "The id of the task",
              "name": "task_id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchTaskRunsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page_RunItemV1_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{tenant}/agents/{task_id}/runs/latest": {
      "get": {
        "tags": ["Runs"],
        "summary": "Get Latest Run",
        "description": "Retrieve the latest run for a task and optionally a schema",
        "operationId": "get_latest_run_v1__tenant__agents__task_id__runs_latest_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "The id of the task",
              "name": "task_id"
            }
          },
          {
            "name": "schema_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 1
                },
                {
                  "type": "null"
                }
              ],
              "title": "Schema Id"
            }
          },
          {
            "name": "is_success",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Is Success"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunV1"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{tenant}/agents/{task_id}/runs/{run_id}": {
      "get": {
        "tags": ["Runs"],
        "summary": "Get Run",
        "operationId": "get_run_v1__tenant__agents__task_id__runs__run_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Run Id"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "The id of the task",
              "name": "task_id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunV1"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{tenant}/agents/{task_id}/runs/{run_id}/completions": {
      "get": {
        "tags": ["Runs"],
        "summary": "Get Llm Completions",
        "operationId": "get_llm_completions_v1__tenant__agents__task_id__runs__run_id__completions_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Run Id"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "The id of the task",
              "name": "task_id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LLMCompletionsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{tenant}/agents": {
      "post": {
        "tags": ["Agents"],
        "summary": "Create Agent",
        "description": "Create a new agent or add a schema to an existing agent.The request is idempotent so calling the endpoint multiple times will not create multiple identical agents.",
        "operationId": "create_agent_v1__tenant__agents_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAgentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/{tenant}/runs/stats": {
      "get": {
        "tags": ["Monitoring"],
        "summary": "Get Tenant Stats",
        "operationId": "get_tenant_stats__tenant__runs_stats_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "created_after",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Created After"
            }
          },
          {
            "name": "created_before",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Created Before"
            }
          },
          {
            "name": "is_active",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Is Active"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/{tenant}/api/keys": {
      "get": {
        "tags": ["API Keys", "API Keys"],
        "summary": "List Api Keys",
        "description": "List all API keys for the current organization\nEndpoint : GET {tenant}/api/keys\n\nReturns:\n    List[APIKeyResponse]",
        "operationId": "list_api_keys__tenant__api_keys_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/APIKeyResponse"
                  },
                  "type": "array",
                  "title": "Response List Api Keys  Tenant  Api Keys Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": ["API Keys", "API Keys"],
        "summary": "Create Api Key",
        "description": "Create a new API key for the current organization\nEndpoint : POST {tenant}/api/keys\n\nArgs:\n    key_create (CreateAPIKeyRequest): Name to create the API key with\n\nRaises:\n    HTTPException: 400 Bad Request\n    HTTPException: 422 API key generation failed to create a unique key. Please try again.\n\nReturns:\n    APIKeyResponseCreated",
        "operationId": "create_api_key__tenant__api_keys_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAPIKeyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIKeyResponseCreated"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/{tenant}/api/keys/{key_id}": {
      "delete": {
        "tags": ["API Keys", "API Keys"],
        "summary": "Delete Api Key",
        "description": "Delete an API key for the current organization\nEndpoint : DELETE {tenant}/api/keys/{key_id}\n\nRaises:\n    HTTPException: 404 Not Found\n    HTTPException: 401 Unauthorized",
        "operationId": "delete_api_key__tenant__api_keys__key_id__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "key_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Key Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/{tenant}/agents/{task_id}/schemas/{task_schema_id}/groups": {
      "get": {
        "tags": ["Agent Groups"],
        "summary": "List Groups",
        "description": "List all groups for an agent schema.",
        "operationId": "list_groups__tenant__agents__task_id__schemas__task_schema_id__groups_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_schema_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "The id of the task schema",
              "name": "task_schema_id"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "The id of the task",
              "name": "task_id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page_TaskGroupWithCost_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Agent Groups"],
        "summary": "Create Group",
        "description": "Create an agent group for the agent",
        "operationId": "create_group__tenant__agents__task_id__schemas__task_schema_id__groups_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "The id of the task",
              "name": "task_id"
            }
          },
          {
            "name": "task_schema_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "The id of the task schema",
              "name": "task_schema_id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTaskGroupRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskGroup"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/{tenant}/agents/{task_id}/schemas/{task_schema_id}/groups/{group_id}": {
      "get": {
        "tags": ["Agent Groups", "Agent Groups"],
        "summary": "Group By Id",
        "description": "Retrieve an agent group",
        "operationId": "group_by_id__tenant__agents__task_id__schemas__task_schema_id__groups__group_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "The id of the task",
              "name": "task_id"
            }
          },
          {
            "name": "task_schema_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "The id of the task schema",
              "name": "task_schema_id"
            }
          },
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The iteration of an existing group",
              "name": "group_id",
              "title": "Group Id"
            },
            "description": "The iteration of an existing group"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskGroup"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Agent Groups", "Agent Groups"],
        "summary": "Patch Group By Id",
        "description": "Update an agent group",
        "operationId": "patch_group_by_id__tenant__agents__task_id__schemas__task_schema_id__groups__group_id__patch",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "The id of the task",
              "name": "task_id"
            }
          },
          {
            "name": "task_schema_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "The id of the task schema",
              "name": "task_schema_id"
            }
          },
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The iteration of an existing group",
              "name": "group_id",
              "title": "Group Id"
            },
            "description": "The iteration of an existing group"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskGroupUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskGroup"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/{tenant}/agents/{task_id}/schemas/{task_schema_id}": {
      "get": {
        "tags": ["Agent Schemas"],
        "summary": "Get Task Schema",
        "operationId": "get_task_schema__tenant__agents__task_id__schemas__task_schema_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Id"
            }
          },
          {
            "name": "task_schema_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Task Schema Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskSchemaResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Agent Schemas"],
        "summary": "Update Task Schema",
        "description": "Update an agent schema's hidden status",
        "operationId": "update_task_schema__tenant__agents__task_id__schemas__task_schema_id__patch",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Id"
            }
          },
          {
            "name": "task_schema_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Task Schema Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskSchemaUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskSchemaResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/{tenant}/agents/{task_id}/schemas/{task_schema_id}/runs": {
      "get": {
        "tags": ["Agent Schemas"],
        "summary": "List Task Runs",
        "operationId": "list_task_runs__tenant__agents__task_id__schemas__task_schema_id__runs_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "The id of the task",
              "name": "task_id"
            }
          },
          {
            "name": "task_schema_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "The id of the task schema",
              "name": "task_schema_id"
            }
          },
          {
            "name": "task_input_hash",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The hash of the task input",
              "title": "Task Input Hash"
            },
            "description": "The hash of the task input"
          },
          {
            "name": "task_output_hash",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The hash of the task output",
              "title": "Task Output Hash"
            },
            "description": "The hash of the task output"
          },
          {
            "name": "group_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "An id of a task run group",
              "title": "Group Id"
            },
            "description": "An id of a task run group"
          },
          {
            "name": "unique_by",
            "in": "query",
            "required": false,
            "schema": {
              "enum": ["task_input_hash", "task_output_hash", "version_id"],
              "type": "string",
              "description": "Make sure only one task run is returned per unique value of the requested field",
              "title": "Unique By"
            },
            "description": "Make sure only one task run is returned per unique value of the requested field"
          },
          {
            "name": "exclude_fields",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "task_input",
                      "task_input_hash",
                      "_id",
                      "task_output",
                      "task_output_hash",
                      "task_schema_id",
                      "llm_completions",
                      "version_id",
                      "group.iteration",
                      "group.properties",
                      "created_at",
                      "status",
                      "metadata",
                      "tool_calls",
                      "tool_call_requests",
                      "eval_hash"
                    ],
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "A list of fields to exclude from the response",
              "title": "Exclude Fields"
            },
            "description": "A list of fields to exclude from the response"
          },
          {
            "name": "include_fields",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "task_input",
                      "task_input_hash",
                      "_id",
                      "task_output",
                      "task_output_hash",
                      "task_schema_id",
                      "llm_completions",
                      "version_id",
                      "group.iteration",
                      "group.properties",
                      "created_at",
                      "status",
                      "metadata",
                      "tool_calls",
                      "tool_call_requests",
                      "eval_hash"
                    ],
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "A list of fields to include in the response",
              "title": "Include Fields"
            },
            "description": "A list of fields to include in the response"
          },
          {
            "name": "created_after",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Only return task runs created after this date",
              "title": "Created After"
            },
            "description": "Only return task runs created after this date"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "enum": ["success", "failure"],
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "The status of the task run. By default, only successful runs are returned",
              "title": "Status"
            },
            "description": "The status of the task run. By default, only successful runs are returned"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "The number of items to return",
              "title": "Limit"
            },
            "description": "The number of items to return"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The number of items to skip",
              "title": "Offset"
            },
            "description": "The number of items to skip"
          },
          {
            "name": "task_input_schema_version",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The version of the task input class",
              "title": "Task Input Schema Version"
            },
            "description": "The version of the task input class"
          },
          {
            "name": "task_output_schema_version",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The version of the task output class",
              "title": "Task Output Schema Version"
            },
            "description": "The version of the task output class"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page_SerializableTaskRun_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Agent Schemas"],
        "summary": "Create Task Run",
        "description": "Import an agent run",
        "operationId": "create_task_run__tenant__agents__task_id__schemas__task_schema_id__runs_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Id"
            }
          },
          {
            "name": "task_schema_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Task Schema Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTaskRunRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializableTaskRun"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/{tenant}/agents/{task_id}/schemas/{task_schema_id}/input": {
      "post": {
        "tags": ["Agent Schemas"],
        "summary": "Generate Input",
        "description": "Generate an input for the given agent",
        "operationId": "generate_input__tenant__agents__task_id__schemas__task_schema_id__input_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Id"
            }
          },
          {
            "name": "task_schema_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Task Schema Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateInputRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "generated": {
                      "title": "Generated",
                      "type": "object"
                    }
                  },
                  "required": ["generated"],
                  "title": "GenerateInputResponse",
                  "type": "object"
                }
              },
              "text/event-stream": {
                "schema": {
                  "properties": {
                    "generated": {
                      "title": "Generated",
                      "type": "object"
                    }
                  },
                  "required": ["generated"],
                  "title": "GenerateInputResponse",
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/{tenant}/agents/{task_id}/schemas/{task_schema_id}/python": {
      "post": {
        "tags": ["Agent Schemas"],
        "summary": "Generate Python Code Block",
        "operationId": "generate_python_code_block__tenant__agents__task_id__schemas__task_schema_id__python_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Id"
            }
          },
          {
            "name": "task_schema_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Task Schema Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateCodeBlockRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateCodeBlockResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/{tenant}/agents/{task_id}/schemas/{task_schema_id}/inputs/import": {
      "post": {
        "tags": ["Agent Schemas"],
        "summary": "Import Inputs",
        "operationId": "import_inputs__tenant__agents__task_id__schemas__task_schema_id__inputs_import_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Id"
            }
          },
          {
            "name": "task_schema_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Task Schema Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImportInputsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "imported_inputs": {
                      "items": {
                        "$ref": "#/components/schemas/TaskInputDict"
                      },
                      "title": "Imported Inputs",
                      "type": "array"
                    }
                  },
                  "required": ["imported_inputs"],
                  "title": "ImportInputsResponse",
                  "type": "object"
                }
              },
              "text/event-stream": {
                "schema": {
                  "properties": {
                    "index": {
                      "title": "Index",
                      "type": "integer"
                    },
                    "imported_input": {
                      "$ref": "#/components/schemas/TaskInputDict"
                    }
                  },
                  "required": ["index", "imported_input"],
                  "title": "ImportInputsStreamResponse",
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/{tenant}/agents/{task_id}/schemas/{task_schema_id}/generate/description": {
      "post": {
        "tags": ["Agent Schemas"],
        "summary": "Stream Task Description",
        "operationId": "stream_task_description__tenant__agents__task_id__schemas__task_schema_id__generate_description_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "The id of the task",
              "name": "task_id"
            }
          },
          {
            "name": "task_schema_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "The id of the task schema",
              "name": "task_schema_id"
            }
          },
          {
            "name": "instructions",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Instructions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/{tenant}/agents/{task_id}/schemas/{task_schema_id}/suggested-instructions": {
      "get": {
        "tags": ["Agent Schemas"],
        "summary": "Stream Task Instructions",
        "operationId": "stream_task_instructions__tenant__agents__task_id__schemas__task_schema_id__suggested_instructions_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Id"
            }
          },
          {
            "name": "task_schema_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Task Schema Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/{tenant}/agents/{task_id}/schemas/{task_schema_id}/versions/{version_id}/deploy": {
      "post": {
        "tags": ["Agent Schemas"],
        "summary": "Deploy Version",
        "operationId": "deploy_version__tenant__agents__task_id__schemas__task_schema_id__versions__version_id__deploy_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_schema_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "The id of the task schema",
              "name": "task_schema_id"
            }
          },
          {
            "name": "version_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Version Id"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "The id of the task",
              "name": "task_id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeployVersionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeployVersionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/{tenant}/agents/{task_id}/schemas/{task_schema_id}/instructions": {
      "put": {
        "tags": ["Agent Schemas"],
        "summary": "Update Task Instructions",
        "operationId": "update_task_instructions__tenant__agents__task_id__schemas__task_schema_id__instructions_put",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Id"
            }
          },
          {
            "name": "task_schema_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Task Schema Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTaskInstructionsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/{tenant}/agents/generate": {
      "post": {
        "tags": ["Agents"],
        "summary": "Generate Io",
        "description": "Generate a new agent based on natural language",
        "operationId": "generate_io__tenant__agents_generate_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskGenerateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskGenerateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/{tenant}/agents/schemas/iterate": {
      "post": {
        "tags": ["Agents"],
        "summary": "Generate Via Chat",
        "description": "Build a new agent based on natural language, allowing for multiple iterations",
        "operationId": "generate_via_chat__tenant__agents_schemas_iterate_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BuildAgentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/{tenant}/agents/schemas/preview": {
      "post": {
        "tags": ["Agents"],
        "summary": "Generate Task Preview",
        "description": "Generate a preview (input, output) of the agent",
        "operationId": "generate_task_preview__tenant__agents_schemas_preview_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateTaskPreviewRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/{tenant}/agents": {
      "get": {
        "tags": ["Agents"],
        "summary": "List Tasks",
        "operationId": "list_tasks__tenant__agents_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page_SerializableTask_"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Agents"],
        "summary": "Create Task",
        "description": "Create a new agent",
        "operationId": "create_task__tenant__agents_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTaskRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializableTaskVariant"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/{tenant}/agents/{task_id}": {
      "get": {
        "tags": ["Agents"],
        "summary": "Get Task",
        "operationId": "get_task__tenant__agents__task_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "The id of the task",
              "name": "task_id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializableTask"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Agents"],
        "summary": "Update Task",
        "description": "Update an agent",
        "operationId": "update_task__tenant__agents__task_id__patch",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "The id of the task",
              "name": "task_id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTaskRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Agents"],
        "summary": "Delete Task",
        "description": "Delete an agent by id",
        "operationId": "delete_task__tenant__agents__task_id__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/{tenant}/agents/{task_id}/schemas": {
      "post": {
        "tags": ["Agents"],
        "summary": "Create Task Schema",
        "description": "Create a new agent schema for a given agent id",
        "operationId": "create_task_schema__tenant__agents__task_id__schemas_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "The id of the task",
              "name": "task_id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTaskSchemaRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializableTaskVariant"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/{tenant}/agents/{task_id}/image": {
      "get": {
        "tags": ["Agents"],
        "summary": "Get Image",
        "operationId": "get_image__tenant__agents__task_id__image_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/{tenant}/agents/{task_id}/runs/stats": {
      "get": {
        "tags": ["Agents"],
        "summary": "Get Task Stats",
        "description": "Get stats for agent",
        "operationId": "get_task_stats__tenant__agents__task_id__runs_stats_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "The id of the task",
              "name": "task_id"
            }
          },
          {
            "name": "created_after",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Created After"
            }
          },
          {
            "name": "created_before",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Created Before"
            }
          },
          {
            "name": "task_schema_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Task Schema Id"
            }
          },
          {
            "name": "version",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Version"
            }
          },
          {
            "name": "is_active",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Is Active"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/{tenant}/agents/{task_id}/versions/deployed": {
      "get": {
        "tags": ["Agents"],
        "summary": "Get Task Versions Deployed",
        "description": "Get deployed versions for agent",
        "operationId": "get_task_versions_deployed__tenant__agents__task_id__versions_deployed_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "The id of the task",
              "name": "task_id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page_DeployedVersionsResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/{tenant}/agents/{task_id}/versions": {
      "get": {
        "tags": ["Agents"],
        "summary": "Get Task Versions",
        "description": "Get all versions for agent",
        "operationId": "get_task_versions__tenant__agents__task_id__versions_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "The id of the task",
              "name": "task_id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page_VersionsResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/{tenant}/organization/settings": {
      "get": {
        "tags": ["Organizations"],
        "summary": "Get Organization Settings",
        "description": "List settings for a tenant",
        "operationId": "get_organization_settings__tenant__organization_settings_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationSettings"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/{tenant}/organization/settings/providers": {
      "post": {
        "tags": ["Organizations"],
        "summary": "Add Provider Settings",
        "description": "Add a provider config",
        "operationId": "add_provider_settings__tenant__organization_settings_providers_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/GroqConfig"
                  },
                  {
                    "$ref": "#/components/schemas/AmazonBedrockConfig"
                  },
                  {
                    "$ref": "#/components/schemas/OpenAIConfig"
                  },
                  {
                    "$ref": "#/components/schemas/GoogleProviderConfig"
                  },
                  {
                    "$ref": "#/components/schemas/AnthropicConfig"
                  },
                  {
                    "$ref": "#/components/schemas/MistralAIConfig"
                  },
                  {
                    "$ref": "#/components/schemas/GoogleGeminiAPIProviderConfig"
                  },
                  {
                    "$ref": "#/components/schemas/AzureOpenAIConfig"
                  }
                ],
                "title": "Request",
                "discriminator": {
                  "propertyName": "provider",
                  "mapping": {
                    "groq": "#/components/schemas/GroqConfig",
                    "amazon_bedrock": "#/components/schemas/AmazonBedrockConfig",
                    "openai": "#/components/schemas/OpenAIConfig",
                    "google": "#/components/schemas/GoogleProviderConfig",
                    "anthropic": "#/components/schemas/AnthropicConfig",
                    "mistral_ai": "#/components/schemas/MistralAIConfig",
                    "google_gemini": "#/components/schemas/GoogleGeminiAPIProviderConfig",
                    "azure_openai": "#/components/schemas/AzureOpenAIConfig"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderSettings"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/{tenant}/organization/settings/providers/{provider_id}": {
      "delete": {
        "tags": ["Organizations"],
        "summary": "Delete Provider Settings",
        "description": "Delete a provider config",
        "operationId": "delete_provider_settings__tenant__organization_settings_providers__provider_id__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "provider_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Provider Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/{tenant}/transcriptions": {
      "post": {
        "tags": ["Transcriptions"],
        "summary": "Transcribe Audio",
        "description": "Transcribe audio",
        "operationId": "transcribe_audio__tenant__transcriptions_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileInputRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api__routers__transcriptions__TranscriptionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/{tenant}/transcriptions/{file_id}": {
      "get": {
        "tags": ["Transcriptions"],
        "summary": "Get Transcription",
        "description": "Get Transcription",
        "operationId": "get_transcription__tenant__transcriptions__file_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "File Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api__routers__transcriptions__TranscriptionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/{tenant}/agents/{task_id}/runs/{run_id}": {
      "get": {
        "tags": ["Runs"],
        "summary": "Get Run",
        "operationId": "get_run__tenant__agents__task_id__runs__run_id__get",
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "The id of the run"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "The id of the task",
              "name": "task_id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializableTaskRun"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/{tenant}/agents/{task_id}/runs/{run_id}/transcriptions": {
      "get": {
        "tags": ["Runs"],
        "summary": "Transcribed Audio",
        "description": "Transcribe audio files in agent run",
        "operationId": "transcribed_audio__tenant__agents__task_id__runs__run_id__transcriptions_get",
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "The id of the run"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "The id of the task",
              "name": "task_id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api__routers__runs_by_id__TranscriptionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/{tenant}/upload/{task_id}": {
      "post": {
        "tags": ["Upload Files"],
        "summary": "Upload File",
        "operationId": "upload_file__tenant__upload__task_id__post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_file__tenant__upload__task_id__post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadFileResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/{tenant}/agents/{task_id}/runs/{run_id}/reviews": {
      "post": {
        "tags": ["Reviews"],
        "summary": "Create Review",
        "description": "Create a user review for a given run",
        "operationId": "create_review__tenant__agents__task_id__runs__run_id__reviews_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "The id of the task",
              "name": "task_id"
            }
          },
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id of the run",
              "name": "run_id",
              "title": "Run Id"
            },
            "description": "The id of the run"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReviewRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Review"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Reviews"],
        "summary": "List Reviews",
        "description": "Retrieve the most recent non-stale reviews for a given run.A review becomes state if either a new review of the same type was created or if the review was responded to",
        "operationId": "list_reviews__tenant__agents__task_id__runs__run_id__reviews_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "The id of the task",
              "name": "task_id"
            }
          },
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id of the run",
              "name": "run_id",
              "title": "Run Id"
            },
            "description": "The id of the run"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page_Review_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/{tenant}/agents/{task_id}/runs/{run_id}/reviews/{review_id}/respond": {
      "post": {
        "tags": ["Reviews"],
        "summary": "Respond To Review",
        "description": "Respond to a review by adding a comment, triggering an improvement of the evaluation instructions.A user review must exist.",
        "operationId": "respond_to_review__tenant__agents__task_id__runs__run_id__reviews__review_id__respond_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "The id of the task",
              "name": "task_id"
            }
          },
          {
            "name": "review_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id of the AI review to respond to",
              "title": "Review Id"
            },
            "description": "The id of the AI review to respond to"
          },
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id of the run",
              "name": "run_id",
              "title": "Run Id"
            },
            "description": "The id of the run"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RespondToReviewRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/{tenant}/agents/{task_id}/schemas/{task_schema_id}/reviews/benchmark": {
      "get": {
        "tags": ["Reviews"],
        "summary": "Get Review Benchmark",
        "description": "Retrieve the benchmark for a given task schema",
        "operationId": "get_review_benchmark__tenant__agents__task_id__schemas__task_schema_id__reviews_benchmark_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "The id of the task",
              "name": "task_id"
            }
          },
          {
            "name": "task_schema_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "The id of the task schema",
              "name": "task_schema_id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewBenchmark"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Reviews"],
        "summary": "Patch Review Benchmark",
        "description": "Patch a review benchmark",
        "operationId": "patch_review_benchmark__tenant__agents__task_id__schemas__task_schema_id__reviews_benchmark_patch",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "The id of the task",
              "name": "task_id"
            }
          },
          {
            "name": "task_schema_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "The id of the task schema",
              "name": "task_schema_id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchReviewBenchmarkRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewBenchmark"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/{tenant}/agents/{task_id}/schemas/{task_schema_id}/evaluation": {
      "get": {
        "tags": ["Reviews"],
        "summary": "Get Task Evaluation",
        "operationId": "get_task_evaluation__tenant__agents__task_id__schemas__task_schema_id__evaluation_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "The id of the task",
              "name": "task_id"
            }
          },
          {
            "name": "task_schema_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "The id of the task schema",
              "name": "task_schema_id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskEvaluationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Reviews"],
        "summary": "Update Task Evaluation",
        "operationId": "update_task_evaluation__tenant__agents__task_id__schemas__task_schema_id__evaluation_patch",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "The id of the task",
              "name": "task_id"
            }
          },
          {
            "name": "task_schema_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "The id of the task schema",
              "name": "task_schema_id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskEvaluationPatchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskEvaluationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/{tenant}/agents/{task_id}/schemas/{task_schema_id}/evaluation/inputs": {
      "get": {
        "tags": ["Reviews"],
        "summary": "Get Ai Reviewer Evaluation Instructions",
        "operationId": "get_ai_reviewer_evaluation_instructions__tenant__agents__task_id__schemas__task_schema_id__evaluation_inputs_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_schema_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "The id of the task schema",
              "name": "task_schema_id"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "The id of the task",
              "name": "task_id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page_InputEvaluationData_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/{tenant}/agents/{task_id}/schemas/{task_schema_id}/evaluation/inputs/{task_input_hash}": {
      "patch": {
        "tags": ["Reviews"],
        "summary": "Update Input Evaluation",
        "operationId": "update_input_evaluation__tenant__agents__task_id__schemas__task_schema_id__evaluation_inputs__task_input_hash__patch",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "The id of the task",
              "name": "task_id"
            }
          },
          {
            "name": "task_schema_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "The id of the task schema",
              "name": "task_schema_id"
            }
          },
          {
            "name": "task_input_hash",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The hash of the task input evaluation to update",
              "title": "Task Input Hash"
            },
            "description": "The hash of the task input evaluation to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputEvaluationPatchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InputEvaluationData"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/{tenant}/agents/new-agent/messages": {
      "post": {
        "tags": ["New Agent"],
        "summary": "Get Agent Suggestion Chat",
        "description": "Allows to chat with an assistant and get agent suggestions",
        "operationId": "get_agent_suggestion_chat__tenant__agents_new_agent_messages_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "assistant_message": {
                      "anyOf": [
                        {
                          "$ref": "#/components/schemas/AgentSuggestionChatMessage"
                        },
                        {
                          "type": "null"
                        }
                      ],
                      "description": "The assistant's message to the user"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "extracting_company_domain",
                        "analyzing_company_context",
                        "generating_agent_suggestions"
                      ],
                      "title": "Status"
                    }
                  },
                  "type": "object",
                  "required": ["status"],
                  "title": "SuggestLlmAgentsForCompanyOutputAndStatus"
                }
              },
              "text/event-stream": {
                "schema": {
                  "properties": {
                    "assistant_message": {
                      "anyOf": [
                        {
                          "$ref": "#/components/schemas/AgentSuggestionChatMessage"
                        },
                        {
                          "type": "null"
                        }
                      ],
                      "description": "The assistant's message to the user"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "extracting_company_domain",
                        "analyzing_company_context",
                        "generating_agent_suggestions"
                      ],
                      "title": "Status"
                    }
                  },
                  "type": "object",
                  "required": ["status"],
                  "title": "SuggestLlmAgentsForCompanyOutputAndStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/{tenant}/organization/payments/payment-methods": {
      "get": {
        "tags": ["Payments"],
        "summary": "Get Payment Method",
        "description": "Get the payment method attached to the organization",
        "operationId": "get_payment_method__tenant__organization_payments_payment_methods_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/PaymentMethodResponse"
                    },
                    {
                      "type": "null"
                    }
                  ],
                  "title": "Response Get Payment Method  Tenant  Organization Payments Payment Methods Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": ["Payments"],
        "summary": "Add Payment Method",
        "description": "Add a payment method to the organization",
        "operationId": "add_payment_method__tenant__organization_payments_payment_methods_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentMethodRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodIdResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": ["Payments"],
        "summary": "Delete Payment Method",
        "description": "Delete the payment method attached to the organization",
        "operationId": "delete_payment_method__tenant__organization_payments_payment_methods_delete",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/{tenant}/organization/payments/customers": {
      "post": {
        "tags": ["Payments"],
        "summary": "Create Customer",
        "description": "Create a customer in Stripe for the organization",
        "operationId": "create_customer__tenant__organization_payments_customers_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCreatedResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/{tenant}/organization/payments/payment-intents": {
      "post": {
        "tags": ["Payments"],
        "summary": "Create Payment Intent",
        "description": "Create a payment intent in Stripe for the organization",
        "operationId": "create_payment_intent__tenant__organization_payments_payment_intents_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentIntentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentIntentCreatedResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/{tenant}/organization/payments/automatic-payments": {
      "put": {
        "tags": ["Payments"],
        "summary": "Update Automatic Payments",
        "description": "Enable or disable automatic payments",
        "operationId": "update_automatic_payments__tenant__organization_payments_automatic_payments_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutomaticPaymentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/{tenant}/internal/agents/new-tool/messages": {
      "post": {
        "tags": ["New Tool Agent", "agents"],
        "summary": "Stream Custom Tool Agent Answer",
        "description": "Allows to chat with an agent to create a new tool",
        "operationId": "stream_custom_tool_agent_answer__tenant__internal_agents_new_tool_messages_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ToolCreationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              },
              "text/event-stream": {
                "schema": {
                  "properties": {
                    "assistant_message": {
                      "$ref": "#/components/schemas/CustomToolCreationChatMessage",
                      "description": "The agent answer to the user"
                    }
                  },
                  "type": "object",
                  "required": ["assistant_message"],
                  "title": "ToolCreationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/{tenant}/internal/agents/new-tool/input": {
      "post": {
        "tags": ["New Tool Agent", "agents"],
        "summary": "Stream Tool Input Example",
        "description": "Allows to generate an example input for a tool",
        "operationId": "stream_tool_input_example__tenant__internal_agents_new_tool_input_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ToolInputExampleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/{tenant}/internal/agents/new-tool/output": {
      "post": {
        "tags": ["New Tool Agent", "agents"],
        "summary": "Stream Tool Output Example",
        "description": "Allows to generate an example output for a tool",
        "operationId": "stream_tool_output_example__tenant__internal_agents_new_tool_output_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ToolOutputExampleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/features/sections": {
      "get": {
        "tags": ["Features"],
        "summary": "List Feature Sections",
        "description": "Get the preview of available features sections and tags",
        "operationId": "list_feature_sections_features_sections_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureSectionResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/features/search": {
      "get": {
        "tags": ["Features"],
        "summary": "List Features By Tag",
        "description": "Search for features by tags. Returns a stream with accumulated features.",
        "operationId": "list_features_by_tag_features_search_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Tags"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              },
              "text/event-stream": {
                "schema": {
                  "properties": {
                    "features": {
                      "anyOf": [
                        {
                          "items": {
                            "$ref": "#/components/schemas/BaseFeature"
                          },
                          "type": "array"
                        },
                        {
                          "type": "null"
                        }
                      ],
                      "title": "Features"
                    }
                  },
                  "title": "FeatureList",
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/features/domain/{company_domain}": {
      "get": {
        "tags": ["Features"],
        "summary": "List Feature By Domain",
        "description": "Get the features available for a specific company domain",
        "operationId": "list_feature_by_domain_features_domain__company_domain__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "company_domain",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Company Domain"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              },
              "text/event-stream": {
                "schema": {
                  "properties": {
                    "features": {
                      "anyOf": [
                        {
                          "items": {
                            "$ref": "#/components/schemas/BaseFeature"
                          },
                          "type": "array"
                        },
                        {
                          "type": "null"
                        }
                      ],
                      "title": "Features"
                    }
                  },
                  "title": "FeatureList",
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/features/preview": {
      "post": {
        "tags": ["Features"],
        "summary": "Get Feature Preview",
        "description": "Get a preview of a feature",
        "operationId": "get_feature_preview_features_preview_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FeaturePreviewRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              },
              "text/event-stream": {
                "schema": {
                  "properties": {
                    "agent_name": {
                      "type": "string",
                      "title": "Agent Name"
                    },
                    "input_schema": {
                      "anyOf": [
                        {
                          "type": "object"
                        },
                        {
                          "type": "null"
                        }
                      ],
                      "title": "Input Schema"
                    },
                    "output_schema": {
                      "anyOf": [
                        {
                          "type": "object"
                        },
                        {
                          "type": "null"
                        }
                      ],
                      "title": "Output Schema"
                    },
                    "output_preview": {
                      "anyOf": [
                        {
                          "type": "object"
                        },
                        {
                          "type": "null"
                        }
                      ],
                      "title": "Output Preview"
                    }
                  },
                  "type": "object",
                  "required": ["agent_name"],
                  "title": "FeatureSchemaAndPreview"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AIReviewer": {
        "properties": {
          "reviewer_type": {
            "type": "string",
            "const": "ai",
            "title": "Reviewer Type",
            "default": "ai"
          }
        },
        "type": "object",
        "title": "AIReviewer"
      },
      "APIKeyResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "partial_key": {
            "type": "string",
            "title": "Partial Key"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "last_used_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Used At"
          },
          "created_by": {
            "$ref": "#/components/schemas/core__domain__users__UserIdentifier"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "partial_key",
          "created_at",
          "last_used_at",
          "created_by"
        ],
        "title": "APIKeyResponse"
      },
      "APIKeyResponseCreated": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "partial_key": {
            "type": "string",
            "title": "Partial Key"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "last_used_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Used At"
          },
          "created_by": {
            "$ref": "#/components/schemas/core__domain__users__UserIdentifier"
          },
          "key": {
            "type": "string",
            "title": "Key"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "partial_key",
          "created_at",
          "last_used_at",
          "created_by",
          "key"
        ],
        "title": "APIKeyResponseCreated"
      },
      "APIToolCallRequest": {
        "properties": {
          "id": {
            "description": "The id of the tool use. The id should be used when returning the result.",
            "title": "Id",
            "type": "string"
          },
          "name": {
            "description": "The name of the tool",
            "title": "Name",
            "type": "string"
          },
          "input": {
            "description": "The input tool should be executed with",
            "title": "Input",
            "type": "object"
          }
        },
        "required": ["id", "name", "input"],
        "title": "APIToolCallRequest",
        "type": "object"
      },
      "AgentSchema": {
        "properties": {
          "task_name": {
            "type": "string",
            "title": "Task Name",
            "description": "The name of the task in Title Case"
          },
          "input_json_schema": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Input Json Schema",
            "description": "The JSON schema of the task input"
          },
          "output_json_schema": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Output Json Schema",
            "description": "The JSON schema of the agent output"
          }
        },
        "type": "object",
        "required": ["task_name"],
        "title": "AgentSchema"
      },
      "AmazonBedrockConfig": {
        "properties": {
          "provider": {
            "type": "string",
            "const": "amazon_bedrock",
            "title": "Provider",
            "default": "amazon_bedrock"
          },
          "aws_bedrock_access_key": {
            "type": "string",
            "title": "Aws Bedrock Access Key"
          },
          "aws_bedrock_secret_key": {
            "type": "string",
            "title": "Aws Bedrock Secret Key"
          },
          "available_model_x_region_map": {
            "additionalProperties": {
              "type": "string"
            },
            "propertyNames": {
              "$ref": "#/components/schemas/Model"
            },
            "type": "object",
            "title": "Available Model X Region Map"
          },
          "default_region": {
            "type": "string",
            "title": "Default Region",
            "default": "us-west-2"
          }
        },
        "type": "object",
        "required": [
          "aws_bedrock_access_key",
          "aws_bedrock_secret_key",
          "available_model_x_region_map"
        ],
        "title": "AmazonBedrockConfig"
      },
      "AnthropicConfig": {
        "properties": {
          "provider": {
            "type": "string",
            "const": "anthropic",
            "title": "Provider",
            "default": "anthropic"
          },
          "api_key": {
            "type": "string",
            "title": "Api Key"
          },
          "url": {
            "type": "string",
            "title": "Url",
            "default": "https://api.anthropic.com/v1/messages"
          }
        },
        "type": "object",
        "required": ["api_key"],
        "title": "AnthropicConfig"
      },
      "AudioContentDict": {
        "properties": {
          "type": {
            "type": "string",
            "const": "audio_url",
            "title": "Type"
          },
          "audio_url": {
            "$ref": "#/components/schemas/AudioURLDict"
          }
        },
        "type": "object",
        "required": ["type", "audio_url"],
        "title": "AudioContentDict"
      },
      "AudioURLDict": {
        "properties": {
          "url": {
            "type": "string",
            "title": "Url"
          }
        },
        "type": "object",
        "required": ["url"],
        "title": "AudioURLDict"
      },
      "AutomaticPaymentRequest": {
        "properties": {
          "opt_in": {
            "type": "boolean",
            "title": "Opt In"
          },
          "threshold": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Threshold"
          },
          "balance_to_maintain": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Balance To Maintain"
          }
        },
        "type": "object",
        "required": ["opt_in"],
        "title": "AutomaticPaymentRequest"
      },
      "AzureOpenAIConfig": {
        "properties": {
          "provider": {
            "type": "string",
            "const": "azure_openai",
            "title": "Provider",
            "default": "azure_openai"
          },
          "deployments": {
            "additionalProperties": {
              "additionalProperties": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                ]
              },
              "type": "object"
            },
            "type": "object",
            "title": "Deployments"
          },
          "api_version": {
            "type": "string",
            "title": "Api Version",
            "default": "2024-12-01-preview"
          },
          "default_region": {
            "type": "string",
            "title": "Default Region",
            "default": "eastus"
          }
        },
        "type": "object",
        "required": ["deployments"],
        "title": "AzureOpenAIConfig"
      },
      "BaseFeature": {
        "properties": {
          "name": {
            "description": "The name of the feature, displayed in the UI",
            "title": "Name",
            "type": "string"
          },
          "description": {
            "description": "A description of the feature, displayed in the UI",
            "title": "Description",
            "type": "string"
          },
          "specifications": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The specifications of the feature, used to generate the feature input and output schema, for internal use only, NOT displayed in the UI. To be provided for 'static' feature suggestions only, null otherwise",
            "title": "Specifications"
          }
        },
        "required": ["name", "description", "specifications"],
        "title": "BaseFeature",
        "type": "object"
      },
      "Body_upload_file__tenant__upload__task_id__post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          }
        },
        "type": "object",
        "required": ["file"],
        "title": "Body_upload_file__tenant__upload__task_id__post"
      },
      "BuildAgentIteration": {
        "properties": {
          "user_message": {
            "type": "string",
            "title": "User Message"
          },
          "assistant_answer": {
            "type": "string",
            "title": "Assistant Answer"
          },
          "task_schema": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AgentSchema"
              },
              {
                "type": "null"
              }
            ],
            "description": "The task schema of the task generated in this iteration"
          }
        },
        "type": "object",
        "required": ["user_message", "assistant_answer"],
        "title": "BuildAgentIteration"
      },
      "BuildAgentRequest": {
        "properties": {
          "previous_iterations": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/BuildAgentIteration"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Previous Iterations",
            "description": "The previous iteration of the task building process, as returned by the API"
          },
          "user_message": {
            "type": "string",
            "title": "User Message"
          },
          "stream": {
            "type": "boolean",
            "title": "Stream",
            "description": "Whether to stream the task building process",
            "default": false
          }
        },
        "type": "object",
        "required": ["user_message"],
        "title": "BuildAgentRequest"
      },
      "CacheUsage": {
        "type": "string",
        "enum": ["auto", "always", "never", "when_available", "only"]
      },
      "ChatMessage": {
        "properties": {
          "role": {
            "type": "string",
            "enum": ["USER", "ASSISTANT"],
            "title": "Role",
            "description": "The role of the message sender",
            "examples": ["USER", "ASSISTANT"]
          },
          "content": {
            "type": "string",
            "title": "Content",
            "description": "The content of the message",
            "examples": [
              "Thank you for your help!",
              "What is the weather forecast for tomorrow?"
            ]
          }
        },
        "type": "object",
        "required": ["role", "content"],
        "title": "ChatMessage"
      },
      "CheckInstructionsRequest": {
        "properties": {
          "instructions": {
            "type": "string",
            "minLength": 1,
            "title": "Instructions"
          }
        },
        "type": "object",
        "required": ["instructions"],
        "title": "CheckInstructionsRequest"
      },
      "CheckInstructionsResponse": {
        "properties": {
          "is_template": {
            "type": "boolean",
            "title": "Is Template"
          },
          "is_valid": {
            "type": "boolean",
            "title": "Is Valid"
          },
          "error": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/api__routers__task_schemas_v1__CheckInstructionsResponse__Error"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": ["is_template", "is_valid"],
        "title": "CheckInstructionsResponse"
      },
      "CodeBlock": {
        "properties": {
          "imports": {
            "type": "string",
            "title": "Imports"
          },
          "code": {
            "type": "string",
            "title": "Code"
          }
        },
        "type": "object",
        "required": ["imports", "code"],
        "title": "CodeBlock"
      },
      "CreateAPIKeyRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "CreateAPIKeyRequest"
      },
      "CreateAgentRequest": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The agent id, must be unique per tenant and URL safe",
            "default": ""
          },
          "input_schema": {
            "type": "object",
            "title": "Input Schema",
            "description": "The input schema for the agent"
          },
          "output_schema": {
            "type": "object",
            "title": "Output Schema",
            "description": "The output schema for the agent"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the agent, if not provided, a TitleCase version of the id is used",
            "default": ""
          },
          "chat_messages": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ChatMessage"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Chat Messages",
            "description": "the chat messages that originated the creation of the task, if created from the chat UI"
          },
          "sanitize_schemas": {
            "type": "boolean",
            "title": "Sanitize Schemas",
            "description": "By default, the schemas are sanitized to make sure that slight changes in schema do not result\n        in a new agent schema id being generated. The schema that we store is then a schema compatible with the\n        original one for validation purposes.\n        The sanitation includes:\n        - splatting $refs that are not specific to WorkflowAI\n        - replacing nullable optional fields with simply optional fields\n        - ordering the `required` field\n        - removing anyOf, oneOf and allOf when possible\n        - adding missing type keys\n        ",
            "default": true
          }
        },
        "type": "object",
        "required": ["input_schema", "output_schema"],
        "title": "CreateAgentRequest"
      },
      "CreatePaymentIntentRequest": {
        "properties": {
          "amount": {
            "type": "number",
            "title": "Amount"
          }
        },
        "type": "object",
        "required": ["amount"],
        "title": "CreatePaymentIntentRequest"
      },
      "CreateReviewRequest": {
        "properties": {
          "outcome": {
            "type": "string",
            "enum": ["positive", "negative"],
            "title": "Outcome"
          },
          "comment": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Comment"
          }
        },
        "type": "object",
        "required": ["outcome"],
        "title": "CreateReviewRequest"
      },
      "CreateTaskGroupRequest": {
        "properties": {
          "id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id",
            "description": "The id of the group. If not provided a uuid will be generated."
          },
          "properties": {
            "$ref": "#/components/schemas/TaskGroupProperties-Input",
            "description": "The properties used for executing runs."
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags",
            "description": "A list of tags associated with the group. If not provided, tags are computed from the properties by creating strings from each key value pair <key>=<value>."
          },
          "use_external_runner": {
            "type": "boolean",
            "title": "Use External Runner",
            "description": "Set to true to store the group as is, without any runner validation.\nNote that it means that the group will not be usable as is by internal runners.",
            "default": false
          }
        },
        "type": "object",
        "required": ["properties"],
        "title": "CreateTaskGroupRequest"
      },
      "CreateTaskRequest": {
        "properties": {
          "input_schema": {
            "type": "object",
            "title": "Input Schema"
          },
          "output_schema": {
            "type": "object",
            "title": "Output Schema"
          },
          "chat_messages": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ChatMessage"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Chat Messages",
            "description": "the chat messages that originated the creation of the task, if created from the chat UI"
          },
          "create_first_iteration": {
            "type": "boolean",
            "title": "Create First Iteration",
            "description": "Wether or not to create a first iteration for the task, that uses the default model and LLM generated instructions",
            "default": false
          },
          "skip_generation": {
            "type": "boolean",
            "title": "Skip Generation",
            "description": "Wether or not to skip the generation of the task instructions and image",
            "default": false
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "the task display name"
          },
          "task_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Task Id",
            "description": "the task id, stable accross all variants. If not provided, an id based on the name is generated."
          }
        },
        "type": "object",
        "required": ["input_schema", "output_schema", "name"],
        "title": "CreateTaskRequest"
      },
      "CreateTaskRunRequest": {
        "properties": {
          "task_input": {
            "type": "object",
            "title": "Task Input",
            "description": "the input of the task. Must match the input schema"
          },
          "task_output": {
            "type": "object",
            "title": "Task Output",
            "description": "the output of the task. Must match the output schema"
          },
          "group": {
            "$ref": "#/components/schemas/DeprecatedVersionReference",
            "description": "A reference to the task group the task run belongs to. By default, we consider that the group is external"
          },
          "id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id",
            "description": "The id to use for a task run. If not provided a uuid will be generated"
          },
          "start_time": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Start Time",
            "description": "the time the run was started."
          },
          "end_time": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "End Time",
            "description": "the time the run ended."
          },
          "labels": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "uniqueItems": true
              },
              {
                "type": "null"
              }
            ],
            "title": "Labels",
            "description": "A list of labels for the task run. Labels are indexed and searchable"
          },
          "metadata": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "Additional metadata to store with the task run."
          },
          "llm_completions": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/LLMCompletion"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Llm Completions",
            "description": "The raw completions used to generate the task output."
          },
          "cost_usd": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cost Usd",
            "description": "The cost of the task run in USD"
          }
        },
        "type": "object",
        "required": ["task_input", "task_output", "group"],
        "title": "CreateTaskRunRequest"
      },
      "CreateTaskSchemaRequest": {
        "properties": {
          "input_schema": {
            "type": "object",
            "title": "Input Schema"
          },
          "output_schema": {
            "type": "object",
            "title": "Output Schema"
          },
          "chat_messages": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ChatMessage"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Chat Messages",
            "description": "the chat messages that originated the creation of the task, if created from the chat UI"
          },
          "create_first_iteration": {
            "type": "boolean",
            "title": "Create First Iteration",
            "description": "Wether or not to create a first iteration for the task, that uses the default model and LLM generated instructions",
            "default": false
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "the task display name"
          },
          "skip_generation": {
            "type": "boolean",
            "title": "Skip Generation",
            "default": false
          }
        },
        "type": "object",
        "required": ["input_schema", "output_schema", "name"],
        "title": "CreateTaskSchemaRequest"
      },
      "CreateVersionRequest": {
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/TaskGroupProperties-Input"
          },
          "save": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Save",
            "description": "Whether to save the version after creating it. If false, the version will not be returned in the list of versions until it is saved. If save is not provided, the version is automatically saved if it is the first version for the schema."
          }
        },
        "type": "object",
        "required": ["properties"],
        "title": "CreateVersionRequest"
      },
      "CreateVersionResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "iteration": {
            "type": "integer",
            "title": "Iteration",
            "deprecated": true
          },
          "semver": {
            "anyOf": [
              {
                "prefixItems": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "integer"
                  }
                ],
                "type": "array",
                "maxItems": 2,
                "minItems": 2
              },
              {
                "type": "null"
              }
            ],
            "title": "Semver"
          },
          "properties": {
            "$ref": "#/components/schemas/TaskGroupProperties-Output"
          }
        },
        "type": "object",
        "required": ["id", "iteration", "semver", "properties"],
        "title": "CreateVersionResponse"
      },
      "CustomToolCreationChatMessage": {
        "properties": {
          "role": {
            "anyOf": [
              {
                "type": "string",
                "enum": ["USER", "ASSISTANT"]
              },
              {
                "type": "null"
              }
            ],
            "title": "Role",
            "description": "The role of the message sender"
          },
          "content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Content",
            "description": "The content of the message"
          },
          "tool": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Tool"
              },
              {
                "type": "null"
              }
            ],
            "description": "The proposed tool to create"
          }
        },
        "type": "object",
        "title": "CustomToolCreationChatMessage"
      },
      "CustomerCreatedResponse": {
        "properties": {
          "customer_id": {
            "type": "string",
            "title": "Customer Id"
          }
        },
        "type": "object",
        "required": ["customer_id"],
        "title": "CustomerCreatedResponse"
      },
      "DeployVersionRequest": {
        "properties": {
          "environment": {
            "$ref": "#/components/schemas/VersionEnvironment"
          },
          "provider_config_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Provider Config Id"
          }
        },
        "type": "object",
        "required": ["environment"],
        "title": "DeployVersionRequest"
      },
      "DeployVersionResponse": {
        "properties": {
          "task_schema_id": {
            "type": "integer",
            "title": "The id of the task schema",
            "name": "task_schema_id"
          },
          "version_id": {
            "type": "integer",
            "title": "Version Id"
          },
          "environment": {
            "$ref": "#/components/schemas/VersionEnvironment"
          },
          "provider_config_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Provider Config Id"
          },
          "deployed_at": {
            "type": "string",
            "format": "date-time",
            "title": "Deployed At"
          }
        },
        "type": "object",
        "required": [
          "task_schema_id",
          "version_id",
          "environment",
          "deployed_at"
        ],
        "title": "DeployVersionResponse"
      },
      "DeployedVersionsResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The group id either client provided or generated, stable for given set of properties",
            "default": ""
          },
          "semver": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/MajorMinor"
              },
              {
                "type": "null"
              }
            ],
            "description": "The semantic version of the task group"
          },
          "schema_id": {
            "type": "integer",
            "title": "Schema Id",
            "description": "The schema id of the task group, incremented for each new schema",
            "default": 0
          },
          "iteration": {
            "type": "integer",
            "title": "Iteration",
            "description": "The iteration of the group, incremented for each new group",
            "default": 0
          },
          "run_count": {
            "type": "integer",
            "title": "Run Count",
            "description": "The number of runs in the group",
            "default": 0
          },
          "properties": {
            "$ref": "#/components/schemas/TaskGroupProperties-Output",
            "description": "The properties used for executing the run."
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags",
            "description": "A list of tags associated with the group. When empty, tags are computed from the properties."
          },
          "aliases": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "uniqueItems": true
              },
              {
                "type": "null"
              }
            ],
            "title": "Aliases",
            "description": "A list of aliases to use in place of iteration or id. An alias can be used to uniquely identify a group for a given task. "
          },
          "is_external": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is External",
            "description": "Whether the group is external, i-e not creating by internal runners"
          },
          "is_favorite": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Favorite",
            "description": "Indicates if the task group is marked as favorite"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes",
            "description": "Additional notes or comments about the task group"
          },
          "similarity_hash": {
            "type": "string",
            "title": "Similarity Hash",
            "description": "A hash computed based on task group properties, used for similarity comparisons",
            "default": ""
          },
          "benchmark_for_datasets": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "uniqueItems": true
              },
              {
                "type": "null"
              }
            ],
            "title": "Benchmark For Datasets"
          },
          "favorited_by": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/core__domain__users__UserIdentifier"
              },
              {
                "type": "null"
              }
            ],
            "description": "The user who favorited the task group"
          },
          "created_by": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/core__domain__users__UserIdentifier"
              },
              {
                "type": "null"
              }
            ],
            "description": "The user who created the task group"
          },
          "deployed_by": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/core__domain__users__UserIdentifier"
              },
              {
                "type": "null"
              }
            ],
            "description": "The user who deployed the task group"
          },
          "last_active_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Active At",
            "description": "The last time the task group was active"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At",
            "description": "The time the task group was created"
          },
          "recent_runs_count": {
            "type": "integer",
            "title": "Recent Runs Count",
            "default": 0
          },
          "deployments": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/Deployment"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Deployments"
          }
        },
        "type": "object",
        "required": [
          "id",
          "iteration",
          "tags",
          "properties",
          "similarity_hash"
        ],
        "title": "DeployedVersionsResponse"
      },
      "Deployment": {
        "properties": {
          "environment": {
            "$ref": "#/components/schemas/VersionEnvironment"
          },
          "provider_config_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Provider Config Id"
          },
          "deployed_at": {
            "type": "string",
            "format": "date-time",
            "title": "Deployed At"
          },
          "deployed_by": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/core__domain__users__UserIdentifier"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": ["environment", "deployed_at"],
        "title": "Deployment"
      },
      "DeprecatedVersionReference": {
        "properties": {
          "id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id",
            "description": "The id of an existing group"
          },
          "iteration": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Iteration",
            "description": "An iteration for an existing group."
          },
          "properties": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TaskGroupProperties-Input"
              },
              {
                "type": "null"
              }
            ],
            "description": "The properties to evaluate the task schema with. A group will be created if needed"
          },
          "alias": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Alias",
            "description": "An alias for the group"
          },
          "is_external": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is External",
            "description": "Whether the group is external, i-e not created by internal runners"
          }
        },
        "type": "object",
        "title": "DeprecatedVersionReference",
        "description": "Refer to an existing group or create a new one with the given properties.\nOnly one of id, iteration or properties must be provided"
      },
      "DocumentContentDict": {
        "properties": {
          "type": {
            "type": "string",
            "const": "document_url",
            "title": "Type"
          },
          "source": {
            "$ref": "#/components/schemas/DocumentURLDict"
          }
        },
        "type": "object",
        "required": ["type", "source"],
        "title": "DocumentContentDict"
      },
      "DocumentURLDict": {
        "properties": {
          "url": {
            "type": "string",
            "title": "Url"
          }
        },
        "type": "object",
        "required": ["url"],
        "title": "DocumentURLDict"
      },
      "FeaturePreviewRequest": {
        "properties": {
          "feature": {
            "$ref": "#/components/schemas/BaseFeature"
          },
          "company_context": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Company Context",
            "description": "To provide for company-specific feature suggestions, null otherwise"
          }
        },
        "type": "object",
        "required": ["feature", "company_context"],
        "title": "FeaturePreviewRequest"
      },
      "FeatureSectionPreview": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "tags": {
            "items": {
              "$ref": "#/components/schemas/TagPreview"
            },
            "type": "array",
            "title": "Tags"
          }
        },
        "type": "object",
        "required": ["name", "tags"],
        "title": "FeatureSectionPreview"
      },
      "FeatureSectionResponse": {
        "properties": {
          "sections": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/FeatureSectionPreview"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sections"
          }
        },
        "type": "object",
        "title": "FeatureSectionResponse"
      },
      "FewShotConfiguration": {
        "properties": {
          "count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "The number of few-shot examples to use for the task",
            "title": "Count"
          },
          "selection": {
            "anyOf": [
              {
                "enum": ["latest", "manual"],
                "type": "string"
              },
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The selection method to use for few-shot examples",
            "title": "Selection"
          },
          "examples": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/FewShotExample"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "The few-shot examples used for the task. If provided, count and selection are ignored. If not provided, count and selection are used to select examples and the examples list will be set in the final group.",
            "title": "Examples"
          }
        },
        "title": "FewShotConfiguration",
        "type": "object"
      },
      "FewShotExample": {
        "properties": {
          "task_input": {
            "title": "Task Input",
            "type": "object"
          },
          "task_output": {
            "title": "Task Output",
            "type": "object"
          }
        },
        "required": ["task_input", "task_output"],
        "title": "FewShotExample",
        "type": "object"
      },
      "FieldQuery": {
        "properties": {
          "field_name": {
            "type": "string",
            "title": "Field Name"
          },
          "operator": {
            "$ref": "#/components/schemas/SearchOperator"
          },
          "values": {
            "items": {},
            "type": "array",
            "title": "Values"
          },
          "type": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "string",
                  "number",
                  "integer",
                  "boolean",
                  "object",
                  "array",
                  "null",
                  "array_length",
                  "date"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Type"
          }
        },
        "type": "object",
        "required": ["field_name", "operator", "values"],
        "title": "FieldQuery"
      },
      "File": {
        "properties": {
          "content_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Content Type"
          },
          "base64_data": {
            "type": "string",
            "title": "Base64 Data"
          }
        },
        "type": "object",
        "required": ["base64_data"],
        "title": "File"
      },
      "FileInputRequest": {
        "properties": {
          "file_id": {
            "type": "string",
            "title": "File Id"
          },
          "data": {
            "type": "string",
            "title": "Data"
          },
          "format": {
            "type": "string",
            "enum": ["m4a", "mp3", "webm", "mp4", "mpga", "wav", "mpeg"],
            "title": "Format"
          }
        },
        "type": "object",
        "required": ["file_id", "data", "format"],
        "title": "FileInputRequest"
      },
      "FullVersionProperties": {
        "properties": {
          "model": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Model",
            "description": "The LLM model used for the run"
          },
          "provider": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Provider",
            "description": "The LLM provider used for the run"
          },
          "temperature": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Temperature",
            "description": "The temperature for generation"
          },
          "instructions": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Instructions",
            "description": "The instructions passed to the runner in order to generate the prompt."
          },
          "max_tokens": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Tokens",
            "description": "The maximum tokens to generate in the prompt"
          },
          "runner_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Runner Name",
            "description": "The name of the runner used"
          },
          "runner_version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Runner Version",
            "description": "The version of the runner used"
          },
          "few_shot": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/FewShotConfiguration"
              },
              {
                "type": "null"
              }
            ],
            "description": "Few shot configuration"
          },
          "template_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Template Name",
            "description": "The template name used for the task"
          },
          "is_chain_of_thought_enabled": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Chain Of Thought Enabled",
            "description": "Whether to use chain of thought prompting for the task"
          },
          "enabled_tools": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ToolKind"
                    },
                    {
                      "$ref": "#/components/schemas/Tool-Output"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Enabled Tools"
          },
          "is_structured_generation_enabled": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Structured Generation Enabled",
            "description": "Whether to use structured generation for the task"
          },
          "has_templated_instructions": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Has Templated Instructions"
          },
          "model_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Model Name",
            "description": "The name of the model"
          },
          "model_icon": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Model Icon",
            "description": "The icon of the model"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "title": "FullVersionProperties"
      },
      "GenerateCodeBlockRequest": {
        "properties": {
          "group_iteration": {
            "type": "integer",
            "title": "Group Iteration"
          },
          "group_environment": {
            "type": "string",
            "title": "Group Environment"
          },
          "example_task_run_input": {
            "type": "object",
            "title": "Example Task Run Input"
          },
          "url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Url"
          },
          "secondary_input": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Secondary Input"
          },
          "separate_run_and_stream": {
            "type": "boolean",
            "title": "Separate Run And Stream",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "group_iteration",
          "group_environment",
          "example_task_run_input"
        ],
        "title": "GenerateCodeBlockRequest"
      },
      "GenerateCodeBlockResponse": {
        "properties": {
          "sdk": {
            "$ref": "#/components/schemas/Snippet"
          },
          "run": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Snippet"
              },
              {
                "$ref": "#/components/schemas/RunSnippet"
              }
            ],
            "title": "Run"
          }
        },
        "type": "object",
        "required": ["sdk", "run"],
        "title": "GenerateCodeBlockResponse"
      },
      "GenerateInputRequest": {
        "properties": {
          "instructions": {
            "type": "string",
            "title": "Instructions",
            "default": ""
          },
          "base_input": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Base Input",
            "description": "The base input to migrate to the new schema"
          },
          "stream": {
            "type": "boolean",
            "title": "Stream",
            "default": false
          }
        },
        "type": "object",
        "title": "GenerateInputRequest"
      },
      "GenerateTaskPreviewRequest": {
        "properties": {
          "chat_messages": {
            "items": {
              "$ref": "#/components/schemas/ChatMessage"
            },
            "type": "array",
            "title": "Chat Messages",
            "description": "the chat messages that originated the creation of the task to generate a preview for"
          },
          "task_input_schema": {
            "type": "object",
            "title": "Task Input Schema",
            "description": "the input schema of the task to generate a preview for"
          },
          "task_output_schema": {
            "type": "object",
            "title": "Task Output Schema",
            "description": "the output schema of the task to generate a preview for"
          },
          "current_preview": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TaskPreview"
              },
              {
                "type": "null"
              }
            ],
            "description": "The current task preview (input, output) to reuse and update, if already existing"
          }
        },
        "type": "object",
        "required": [
          "chat_messages",
          "task_input_schema",
          "task_output_schema"
        ],
        "title": "GenerateTaskPreviewRequest"
      },
      "GoogleGeminiAPIProviderConfig": {
        "properties": {
          "provider": {
            "type": "string",
            "const": "google_gemini",
            "title": "Provider",
            "default": "google_gemini"
          },
          "api_key": {
            "type": "string",
            "title": "Api Key"
          },
          "url": {
            "type": "string",
            "title": "Url"
          },
          "default_block_threshold": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "BLOCK_LOW_AND_ABOVE",
                  "BLOCK_MEDIUM_AND_ABOVE",
                  "BLOCK_ONLY_HIGH",
                  "BLOCK_NONE"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Default Block Threshold"
          }
        },
        "type": "object",
        "required": ["api_key", "url"],
        "title": "GoogleGeminiAPIProviderConfig"
      },
      "GoogleProviderConfig": {
        "properties": {
          "provider": {
            "type": "string",
            "const": "google",
            "title": "Provider",
            "default": "google"
          },
          "vertex_project": {
            "type": "string",
            "title": "Vertex Project"
          },
          "vertex_credentials": {
            "type": "string",
            "title": "Vertex Credentials"
          },
          "vertex_location": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Vertex Location"
          },
          "default_block_threshold": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "BLOCK_LOW_AND_ABOVE",
                  "BLOCK_MEDIUM_AND_ABOVE",
                  "BLOCK_ONLY_HIGH",
                  "BLOCK_NONE"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Default Block Threshold"
          }
        },
        "type": "object",
        "required": ["vertex_project", "vertex_credentials", "vertex_location"],
        "title": "GoogleProviderConfig"
      },
      "GroqConfig": {
        "properties": {
          "provider": {
            "type": "string",
            "const": "groq",
            "title": "Provider",
            "default": "groq"
          },
          "api_key": {
            "type": "string",
            "title": "Api Key"
          }
        },
        "type": "object",
        "required": ["api_key"],
        "title": "GroqConfig"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "ImageContentDict": {
        "properties": {
          "type": {
            "type": "string",
            "const": "image_url",
            "title": "Type"
          },
          "image_url": {
            "$ref": "#/components/schemas/ImageURLDict"
          }
        },
        "type": "object",
        "required": ["type", "image_url"],
        "title": "ImageContentDict"
      },
      "ImageURLDict": {
        "properties": {
          "url": {
            "type": "string",
            "title": "Url"
          }
        },
        "type": "object",
        "required": ["url"],
        "title": "ImageURLDict"
      },
      "ImportInputsRequest": {
        "properties": {
          "inputs_text": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Inputs Text",
            "description": "The text to import as input"
          },
          "inputs_file": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/File"
              },
              {
                "type": "null"
              }
            ],
            "description": "An optional file to import as input."
          },
          "stream": {
            "type": "boolean",
            "title": "Stream",
            "default": false
          }
        },
        "type": "object",
        "title": "ImportInputsRequest"
      },
      "ImproveVersionRequest": {
        "properties": {
          "run_id": {
            "type": "string",
            "title": "Run Id",
            "description": "The id of the run that received an evaluation"
          },
          "user_evaluation": {
            "type": "string",
            "title": "User Evaluation",
            "description": "A comment on why the task run was not optimal"
          },
          "stream": {
            "type": "boolean",
            "title": "Stream",
            "default": false
          }
        },
        "type": "object",
        "required": ["run_id", "user_evaluation"],
        "title": "ImproveVersionRequest"
      },
      "InputEvaluationData": {
        "properties": {
          "task_input_hash": {
            "type": "string",
            "title": "Task Input Hash"
          },
          "task_input": {
            "type": "object",
            "title": "Task Input"
          },
          "correct_outputs": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "title": "Correct Outputs"
          },
          "incorrect_outputs": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "title": "Incorrect Outputs"
          },
          "evaluation_instructions": {
            "type": "string",
            "title": "Evaluation Instructions"
          }
        },
        "type": "object",
        "required": [
          "task_input_hash",
          "task_input",
          "correct_outputs",
          "incorrect_outputs",
          "evaluation_instructions"
        ],
        "title": "InputEvaluationData"
      },
      "InputEvaluationPatchRequest": {
        "properties": {
          "update_input_evaluation_instructions": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Update Input Evaluation Instructions",
            "description": "The evaluation instructions to use for the input"
          },
          "add_correct_output": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Add Correct Output",
            "description": "A correct output to use in evaluations. If the output already existed as an incorrect output, the matching incorrect output is removed. If the output already existed in the correct outputs, the output is ignored"
          },
          "remove_correct_output": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Remove Correct Output",
            "description": "A correct output to remove from evaluations"
          },
          "add_incorrect_output": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Add Incorrect Output",
            "description": "An incorrect output to use in evaluations. If the output already existed as a correct output, the matching correct output is removed. If the output already existed in the incorrect outputs, the output is ignored"
          },
          "remove_incorrect_output": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Remove Incorrect Output",
            "description": "An incorrect output to remove from evaluations"
          }
        },
        "type": "object",
        "title": "InputEvaluationPatchRequest"
      },
      "InternalReasoningStep": {
        "properties": {
          "title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Title",
            "description": "A brief title for this step (maximum a few words)"
          },
          "explaination": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Explaination",
            "description": "The explanation for this step of reasoning"
          },
          "output": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Output",
            "description": "The output or conclusion from this step"
          }
        },
        "type": "object",
        "title": "InternalReasoningStep"
      },
      "Item": {
        "properties": {
          "field_name": {
            "type": "string",
            "title": "Field Name"
          },
          "operators": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Operators",
            "description": "The operators that can be used with the field"
          },
          "suggestions": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Suggestions",
            "description": "The suggestions for the field"
          },
          "type": {
            "type": "string",
            "enum": [
              "string",
              "number",
              "integer",
              "boolean",
              "object",
              "array",
              "null",
              "array_length",
              "date"
            ],
            "title": "Type",
            "description": "The type of the field"
          }
        },
        "type": "object",
        "required": ["field_name", "operators", "type"],
        "title": "Item"
      },
      "LLMCompletion": {
        "properties": {
          "duration_seconds": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Duration Seconds"
          },
          "messages": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "title": "Messages"
          },
          "response": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Response"
          },
          "tool_calls": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ToolCallRequestWithID"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Calls"
          },
          "usage": {
            "$ref": "#/components/schemas/LLMUsage"
          },
          "provider": {
            "$ref": "#/components/schemas/Provider"
          }
        },
        "type": "object",
        "required": ["messages", "usage", "provider"],
        "title": "LLMCompletion"
      },
      "LLMCompletionTypedMessages": {
        "properties": {
          "messages": {
            "items": {
              "$ref": "#/components/schemas/StandardMessage"
            },
            "type": "array",
            "title": "Messages"
          },
          "response": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Response"
          },
          "usage": {
            "$ref": "#/components/schemas/LLMUsage"
          },
          "duration_seconds": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Duration Seconds"
          }
        },
        "type": "object",
        "required": ["messages", "usage"],
        "title": "LLMCompletionTypedMessages"
      },
      "LLMCompletionsResponse": {
        "properties": {
          "completions": {
            "items": {
              "$ref": "#/components/schemas/LLMCompletionTypedMessages"
            },
            "type": "array",
            "title": "Completions"
          }
        },
        "type": "object",
        "required": ["completions"],
        "title": "LLMCompletionsResponse"
      },
      "LLMUsage": {
        "properties": {
          "completion_token_count": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Completion Token Count"
          },
          "completion_cost_usd": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Completion Cost Usd"
          },
          "reasoning_token_count": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reasoning Token Count"
          },
          "prompt_token_count": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prompt Token Count"
          },
          "prompt_token_count_cached": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prompt Token Count Cached",
            "description": "The part of the prompt_token_count that were cached from a previous request."
          },
          "prompt_cost_usd": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prompt Cost Usd"
          },
          "prompt_audio_token_count": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prompt Audio Token Count"
          },
          "prompt_audio_duration_seconds": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prompt Audio Duration Seconds"
          },
          "prompt_image_count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prompt Image Count"
          },
          "model_context_window_size": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Model Context Window Size"
          }
        },
        "type": "object",
        "title": "LLMUsage"
      },
      "ListModelsRequest": {
        "properties": {
          "instructions": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Instructions",
            "description": "The instructions to use to build the models list, because instructions contains tools, and not all models support all tools."
          },
          "requires_tools": {
            "type": "boolean",
            "title": "Requires Tools",
            "description": "Wether the agent is using tools. This flag is mainly fed by the SDK when external tools are used.",
            "default": false
          }
        },
        "type": "object",
        "title": "ListModelsRequest"
      },
      "MajorMinor": {
        "prefixItems": [
          {
            "type": "integer",
            "title": "Major"
          },
          {
            "type": "integer",
            "title": "Minor"
          }
        ],
        "type": "array",
        "maxItems": 2,
        "minItems": 2
      },
      "MajorVersion": {
        "properties": {
          "major": {
            "type": "integer",
            "title": "Major"
          },
          "schema_id": {
            "type": "integer",
            "title": "Schema Id"
          },
          "minors": {
            "items": {
              "$ref": "#/components/schemas/MinorVersion"
            },
            "type": "array",
            "title": "Minors"
          },
          "created_by": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/api__schemas__user_identifier__UserIdentifier"
              },
              {
                "type": "null"
              }
            ],
            "description": "The user who created the version"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "properties": {
            "$ref": "#/components/schemas/MajorVersionProperties"
          },
          "previous_version": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PreviousVersion"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "major",
          "schema_id",
          "minors",
          "created_at",
          "properties",
          "previous_version"
        ],
        "title": "MajorVersion"
      },
      "MajorVersionProperties": {
        "properties": {
          "temperature": {
            "type": "number",
            "title": "Temperature"
          },
          "instructions": {
            "type": "string",
            "title": "Instructions"
          },
          "task_variant_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Task Variant Id",
            "description": "The id of the full schema, including versions and examples"
          }
        },
        "type": "object",
        "required": ["temperature", "instructions", "task_variant_id"],
        "title": "MajorVersionProperties"
      },
      "MinorVersion": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The id of the full version"
          },
          "iteration": {
            "type": "integer",
            "title": "Iteration",
            "deprecated": true
          },
          "model": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Model"
              },
              {
                "type": "string"
              }
            ],
            "title": "Model"
          },
          "deployments": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/VersionDeploymentMetadata"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Deployments"
          },
          "cost_estimate_usd": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cost Estimate Usd"
          },
          "last_active_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Active At",
            "description": "The last time the task version minor was active"
          },
          "is_favorite": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Favorite"
          },
          "favorited_by": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/api__schemas__user_identifier__UserIdentifier"
              },
              {
                "type": "null"
              }
            ]
          },
          "created_by": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/api__schemas__user_identifier__UserIdentifier"
              },
              {
                "type": "null"
              }
            ]
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "run_count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Run Count"
          },
          "minor": {
            "type": "integer",
            "title": "Minor"
          },
          "properties": {
            "$ref": "#/components/schemas/ShortVersionProperties"
          }
        },
        "type": "object",
        "required": [
          "id",
          "iteration",
          "model",
          "deployments",
          "cost_estimate_usd",
          "last_active_at",
          "is_favorite",
          "favorited_by",
          "created_by",
          "notes",
          "run_count",
          "minor",
          "properties"
        ],
        "title": "MinorVersion"
      },
      "MistralAIConfig": {
        "properties": {
          "provider": {
            "type": "string",
            "const": "mistral_ai",
            "title": "Provider",
            "default": "mistral_ai"
          },
          "url": {
            "type": "string",
            "title": "Url",
            "default": "https://api.mistral.ai/v1/chat/completions"
          },
          "api_key": {
            "type": "string",
            "title": "Api Key"
          }
        },
        "type": "object",
        "required": ["api_key"],
        "title": "MistralAIConfig"
      },
      "Model": {
        "type": "string",
        "enum": [
          "gpt-4o-latest",
          "gemini-2.0-flash-latest",
          "claude-3-5-sonnet-latest",
          "gemini-1.5-flash-latest",
          "gpt-4o-2024-11-20",
          "gpt-4o-2024-08-06",
          "gpt-4o-2024-05-13",
          "gpt-4o-mini-latest",
          "gpt-4o-mini-2024-07-18",
          "o3-mini-latest-high",
          "o3-mini-latest-medium",
          "o3-mini-latest-low",
          "o3-mini-2025-01-31-high",
          "o3-mini-2025-01-31-medium",
          "o3-mini-2025-01-31-low",
          "o1-2024-12-17-high",
          "o1-2024-12-17",
          "o1-2024-12-17-low",
          "o1-preview-2024-09-12",
          "o1-mini-latest",
          "o1-mini-2024-09-12",
          "gpt-4.5-preview-2025-02-27",
          "gpt-4o-audio-preview-2024-12-17",
          "gpt-4o-audio-preview-2024-10-01",
          "gpt-4-turbo-2024-04-09",
          "gpt-4-0125-preview",
          "gpt-4-1106-preview",
          "gpt-4-1106-vision-preview",
          "gpt-3.5-turbo-0125",
          "gpt-3.5-turbo-1106",
          "gemini-2.0-flash-001",
          "gemini-2.0-flash-lite-preview-02-05",
          "gemini-2.0-pro-exp-02-05",
          "gemini-2.0-flash-exp",
          "gemini-2.0-flash-thinking-exp-1219",
          "gemini-2.0-flash-thinking-exp-01-21",
          "gemini-1.5-pro-latest",
          "gemini-1.5-pro-002",
          "gemini-1.5-pro-001",
          "gemini-1.5-pro-preview-0514",
          "gemini-1.5-pro-preview-0409",
          "gemini-1.5-flash-002",
          "gemini-1.5-flash-001",
          "gemini-1.5-flash-8b",
          "gemini-1.5-flash-preview-0514",
          "gemini-exp-1206",
          "gemini-exp-1121",
          "gemini-1.0-pro-002",
          "gemini-1.0-pro-001",
          "gemini-1.0-pro-vision-001",
          "claude-3-7-sonnet-latest",
          "claude-3-7-sonnet-20250219",
          "claude-3-5-sonnet-20241022",
          "claude-3-5-sonnet-20240620",
          "claude-3-5-haiku-latest",
          "claude-3-5-haiku-20241022",
          "claude-3-opus-20240229",
          "claude-3-sonnet-20240229",
          "claude-3-haiku-20240307",
          "llama-3.3-70b",
          "llama-3.2-90b",
          "llama-3.2-11b",
          "llama-3.2-11b-vision",
          "llama-3.2-3b",
          "llama-3.2-1b",
          "llama-3.2-90b-vision-preview",
          "llama-3.2-90b-text-preview",
          "llama-3.2-11b-text-preview",
          "llama-3.2-3b-preview",
          "llama-3.2-1b-preview",
          "llama-3.1-405b",
          "llama-3.1-70b",
          "llama-3.1-8b",
          "llama3-70b-8192",
          "llama3-8b-8192",
          "mixtral-8x7b-32768",
          "mistral-large-2-latest",
          "mistral-large-2-2407",
          "mistral-large-latest",
          "mistral-large-2411",
          "pixtral-large-latest",
          "pixtral-large-2411",
          "pixtral-12b-2409",
          "ministral-3b-2410",
          "ministral-8b-2410",
          "mistral-small-2409",
          "codestral-mamba-2407",
          "qwen-v3p2-32b-instruct",
          "deepseek-v3-2412",
          "deepseek-r1-2501"
        ],
        "title": "Model"
      },
      "ModelMetadata": {
        "properties": {
          "provider_name": {
            "type": "string",
            "title": "Provider Name",
            "description": "The name of the provider for the model"
          },
          "price_per_input_token_usd": {
            "type": "number",
            "title": "Price Per Input Token Usd",
            "description": "The price per input token in USD"
          },
          "price_per_output_token_usd": {
            "type": "number",
            "title": "Price Per Output Token Usd",
            "description": "The price per output token in USD"
          },
          "release_date": {
            "type": "string",
            "format": "date",
            "title": "Release Date",
            "description": "The date the model was released"
          },
          "context_window_tokens": {
            "type": "integer",
            "title": "Context Window Tokens",
            "description": "The context window of the model in tokens"
          },
          "quality_index": {
            "type": "integer",
            "title": "Quality Index",
            "description": "The quality index of the model, from 0 to 100. None if not available. Source: artificialanalysis.ai"
          }
        },
        "type": "object",
        "required": [
          "provider_name",
          "price_per_input_token_usd",
          "price_per_output_token_usd",
          "release_date",
          "context_window_tokens",
          "quality_index"
        ],
        "title": "ModelMetadata"
      },
      "ModelResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "icon_url": {
            "type": "string",
            "title": "Icon Url",
            "description": "The url of the icon to display for the model"
          },
          "modes": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Modes",
            "description": "The modes supported by the model"
          },
          "is_not_supported_reason": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Not Supported Reason",
            "description": "Why the model does not support the current schema. Only provided if the model is not supported by the current schema."
          },
          "average_cost_per_run_usd": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Average Cost Per Run Usd",
            "description": "The average cost per run in USD"
          },
          "is_latest": {
            "type": "boolean",
            "title": "Is Latest",
            "description": "Whether the model is the latest in its family. In other wordsby default, only models with is_latest=True should be displayed."
          },
          "metadata": {
            "$ref": "#/components/schemas/ModelMetadata",
            "description": "The metadata of the model"
          },
          "is_default": {
            "type": "boolean",
            "title": "Is Default",
            "description": "If true, the model will be used as default model.",
            "default": false
          },
          "providers": {
            "items": {
              "$ref": "#/components/schemas/Provider"
            },
            "type": "array",
            "title": "Providers",
            "description": "The providers that support this model"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "icon_url",
          "modes",
          "is_not_supported_reason",
          "average_cost_per_run_usd",
          "is_latest",
          "metadata",
          "providers"
        ],
        "title": "ModelResponse"
      },
      "OpenAIConfig": {
        "properties": {
          "provider": {
            "type": "string",
            "const": "openai",
            "title": "Provider",
            "default": "openai"
          },
          "url": {
            "type": "string",
            "title": "Url",
            "default": "https://api.openai.com/v1/chat/completions"
          },
          "api_key": {
            "type": "string",
            "title": "Api Key"
          }
        },
        "type": "object",
        "required": ["api_key"],
        "title": "OpenAIConfig"
      },
      "OrganizationSettings": {
        "properties": {
          "uid": {
            "type": "integer",
            "title": "Uid",
            "default": 0
          },
          "tenant": {
            "type": "string",
            "title": "Tenant",
            "default": ""
          },
          "slug": {
            "type": "string",
            "title": "Slug",
            "default": ""
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "org_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Org Id"
          },
          "anonymous_user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Anonymous user id"
          },
          "anonymous": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Anonymous organization"
          },
          "stripe_customer_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stripe Customer Id"
          },
          "providers": {
            "items": {
              "$ref": "#/components/schemas/ProviderSettings"
            },
            "type": "array",
            "title": "List of provider configurations"
          },
          "added_credits_usd": {
            "type": "number",
            "title": "Total credits added to the organization",
            "default": 0
          },
          "current_credits_usd": {
            "type": "number",
            "title": "Current credits available to the organization",
            "default": 0
          },
          "locked_for_payment": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Locked For Payment"
          },
          "last_payment_failed_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Payment Failed At"
          },
          "automatic_payment_enabled": {
            "type": "boolean",
            "title": "Automatic payment enabled",
            "default": false
          },
          "automatic_payment_threshold": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Automatic payment threshold"
          },
          "automatic_payment_balance_to_maintain": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Automatic payment balance to maintain"
          }
        },
        "type": "object",
        "title": "OrganizationSettings"
      },
      "Page_DeployedVersionsResponse_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/DeployedVersionsResponse"
            },
            "type": "array",
            "title": "Items"
          },
          "count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Count"
          }
        },
        "type": "object",
        "required": ["items"],
        "title": "Page[DeployedVersionsResponse]"
      },
      "Page_InputEvaluationData_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/InputEvaluationData"
            },
            "type": "array",
            "title": "Items"
          },
          "count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Count"
          }
        },
        "type": "object",
        "required": ["items"],
        "title": "Page[InputEvaluationData]"
      },
      "Page_MajorVersion_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/MajorVersion"
            },
            "type": "array",
            "title": "Items"
          },
          "count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Count"
          }
        },
        "type": "object",
        "required": ["items"],
        "title": "Page[MajorVersion]"
      },
      "Page_ModelResponse_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ModelResponse"
            },
            "type": "array",
            "title": "Items"
          },
          "count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Count"
          }
        },
        "type": "object",
        "required": ["items"],
        "title": "Page[ModelResponse]"
      },
      "Page_Review_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Review"
            },
            "type": "array",
            "title": "Items"
          },
          "count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Count"
          }
        },
        "type": "object",
        "required": ["items"],
        "title": "Page[Review]"
      },
      "Page_RunItemV1_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/RunItemV1"
            },
            "type": "array",
            "title": "Items"
          },
          "count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Count"
          }
        },
        "type": "object",
        "required": ["items"],
        "title": "Page[RunItemV1]"
      },
      "Page_SerializableTaskRun_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/SerializableTaskRun"
            },
            "type": "array",
            "title": "Items"
          },
          "count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Count"
          }
        },
        "type": "object",
        "required": ["items"],
        "title": "Page[SerializableTaskRun]"
      },
      "Page_SerializableTask_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/SerializableTask"
            },
            "type": "array",
            "title": "Items"
          },
          "count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Count"
          }
        },
        "type": "object",
        "required": ["items"],
        "title": "Page[SerializableTask]"
      },
      "Page_TaskGroupWithCost_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/TaskGroupWithCost"
            },
            "type": "array",
            "title": "Items"
          },
          "count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Count"
          }
        },
        "type": "object",
        "required": ["items"],
        "title": "Page[TaskGroupWithCost]"
      },
      "Page_VersionsResponse_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/VersionsResponse"
            },
            "type": "array",
            "title": "Items"
          },
          "count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Count"
          }
        },
        "type": "object",
        "required": ["items"],
        "title": "Page[VersionsResponse]"
      },
      "PartialTaskVersion": {
        "properties": {
          "schema_id": {
            "type": "integer",
            "title": "Schema Id"
          },
          "variant_id": {
            "type": "string",
            "title": "Variant Id"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "input_schema_version": {
            "type": "string",
            "title": "Input Schema Version"
          },
          "output_schema_version": {
            "type": "string",
            "title": "Output Schema Version"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "default": "1970-01-01T00:00:00Z"
          },
          "is_hidden": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Hidden"
          },
          "last_active_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Active At"
          }
        },
        "type": "object",
        "required": [
          "schema_id",
          "variant_id",
          "input_schema_version",
          "output_schema_version"
        ],
        "title": "PartialTaskVersion"
      },
      "PatchReviewBenchmarkRequest": {
        "properties": {
          "add_versions": {
            "anyOf": [
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Add Versions"
          },
          "remove_versions": {
            "anyOf": [
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Remove Versions"
          }
        },
        "type": "object",
        "title": "PatchReviewBenchmarkRequest"
      },
      "PaymentIntentCreatedResponse": {
        "properties": {
          "client_secret": {
            "type": "string",
            "title": "Client Secret"
          },
          "payment_intent_id": {
            "type": "string",
            "title": "Payment Intent Id"
          }
        },
        "type": "object",
        "required": ["client_secret", "payment_intent_id"],
        "title": "PaymentIntentCreatedResponse"
      },
      "PaymentMethodIdResponse": {
        "properties": {
          "payment_method_id": {
            "type": "string",
            "title": "Payment Method Id"
          }
        },
        "type": "object",
        "required": ["payment_method_id"],
        "title": "PaymentMethodIdResponse"
      },
      "PaymentMethodRequest": {
        "properties": {
          "payment_method_id": {
            "type": "string",
            "title": "Payment Method Id"
          },
          "payment_method_currency": {
            "type": "string",
            "title": "Payment Method Currency",
            "default": "USD"
          }
        },
        "type": "object",
        "required": ["payment_method_id"],
        "title": "PaymentMethodRequest"
      },
      "PaymentMethodResponse": {
        "properties": {
          "payment_method_id": {
            "type": "string",
            "title": "Payment Method Id"
          },
          "last4": {
            "type": "string",
            "title": "Last4"
          },
          "brand": {
            "type": "string",
            "title": "Brand"
          },
          "exp_month": {
            "type": "integer",
            "title": "Exp Month"
          },
          "exp_year": {
            "type": "integer",
            "title": "Exp Year"
          }
        },
        "type": "object",
        "required": [
          "payment_method_id",
          "last4",
          "brand",
          "exp_month",
          "exp_year"
        ],
        "title": "PaymentMethodResponse"
      },
      "PreviousVersion": {
        "properties": {
          "major": {
            "type": "integer",
            "title": "Major"
          },
          "changelog": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Changelog"
          }
        },
        "type": "object",
        "required": ["major", "changelog"],
        "title": "PreviousVersion"
      },
      "Provider": {
        "type": "string",
        "enum": [
          "fireworks",
          "amazon_bedrock",
          "openai",
          "azure_openai",
          "google",
          "anthropic",
          "groq",
          "mistral_ai",
          "google_gemini"
        ],
        "title": "Provider"
      },
      "ProviderSettings": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "provider": {
            "$ref": "#/components/schemas/Provider"
          }
        },
        "type": "object",
        "required": ["id", "created_at", "provider"],
        "title": "ProviderSettings"
      },
      "ReasoningStep": {
        "properties": {
          "title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "step": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Step"
          }
        },
        "required": ["title", "step"],
        "title": "ReasoningStep",
        "type": "object"
      },
      "RespondToReviewRequest": {
        "properties": {
          "comment": {
            "type": "string",
            "title": "Comment"
          }
        },
        "type": "object",
        "required": ["comment"],
        "title": "RespondToReviewRequest"
      },
      "Review": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "created_by": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserReviewer"
              },
              {
                "$ref": "#/components/schemas/AIReviewer"
              }
            ],
            "title": "Created By",
            "discriminator": {
              "propertyName": "reviewer_type",
              "mapping": {
                "ai": "#/components/schemas/AIReviewer",
                "user": "#/components/schemas/UserReviewer"
              }
            }
          },
          "outcome": {
            "anyOf": [
              {
                "type": "string",
                "enum": ["positive", "negative", "unsure"]
              },
              {
                "type": "null"
              }
            ],
            "title": "Outcome"
          },
          "status": {
            "type": "string",
            "enum": ["in_progress", "completed"],
            "title": "Status"
          },
          "comment": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Comment",
            "description": "A comment left by the reviewer",
            "deprecated": true
          },
          "summary": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Summary"
          },
          "positive_aspects": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Positive Aspects"
          },
          "negative_aspects": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Negative Aspects"
          }
        },
        "type": "object",
        "required": ["id", "created_at", "created_by", "outcome", "status"],
        "title": "Review"
      },
      "ReviewBenchmark": {
        "properties": {
          "results": {
            "items": {
              "$ref": "#/components/schemas/VersionResult"
            },
            "type": "array",
            "title": "Results"
          },
          "is_building_ai_reviewer": {
            "type": "boolean",
            "title": "Is Building Ai Reviewer",
            "description": "Whether a new AI reviewer is being built.When done building, some reviews that need to be recomputed",
            "default": false
          }
        },
        "type": "object",
        "required": ["results"],
        "title": "ReviewBenchmark"
      },
      "RunItemV1": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "the id of the task run"
          },
          "task_id": {
            "type": "string",
            "title": "Task Id",
            "description": "the id of the task"
          },
          "task_schema_id": {
            "type": "integer",
            "title": "Task Schema Id",
            "description": "The id of the task run's schema"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "status": {
            "type": "string",
            "enum": ["success", "failure"],
            "title": "Status"
          },
          "duration_seconds": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Duration Seconds"
          },
          "cost_usd": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cost Usd"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The time the task run was created"
          },
          "user_review": {
            "anyOf": [
              {
                "type": "string",
                "enum": ["positive", "negative"]
              },
              {
                "type": "null"
              }
            ],
            "title": "User Review"
          },
          "ai_review": {
            "anyOf": [
              {
                "type": "string",
                "enum": ["positive", "negative", "unsure", "in_progress"]
              },
              {
                "type": "null"
              }
            ],
            "title": "Ai Review"
          },
          "task_input_preview": {
            "type": "string",
            "title": "Task Input Preview",
            "description": "A preview of the input data"
          },
          "task_output_preview": {
            "type": "string",
            "title": "Task Output Preview",
            "description": "A preview of the output data"
          },
          "error": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/api__routers__runs_v1__RunItemV1__Error"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "id",
          "task_id",
          "task_schema_id",
          "version",
          "status",
          "duration_seconds",
          "cost_usd",
          "created_at",
          "user_review",
          "ai_review",
          "task_input_preview",
          "task_output_preview",
          "error"
        ],
        "title": "RunItemV1"
      },
      "RunReplyRequest": {
        "properties": {
          "version": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/VersionEnvironment"
              },
              {
                "$ref": "#/components/schemas/TaskGroupProperties-Input"
              },
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/MajorMinor"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version",
            "description": "The version of the task to reply to. If not provided the latest version is used."
          },
          "user_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Message"
          },
          "tool_results": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ToolCallResult"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Results"
          },
          "metadata": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          },
          "stream": {
            "type": "boolean",
            "title": "Stream",
            "default": false
          }
        },
        "type": "object",
        "title": "RunReplyRequest"
      },
      "RunRequest": {
        "properties": {
          "task_input": {
            "type": "object",
            "title": "Task Input"
          },
          "version": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/VersionEnvironment"
              },
              {
                "$ref": "#/components/schemas/TaskGroupProperties-Input"
              },
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/MajorMinor"
              }
            ],
            "title": "Version"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "An optional id, must be a valid uuid7. If not provided a uuid7 will be generated"
          },
          "stream": {
            "type": "boolean",
            "title": "Stream",
            "default": false
          },
          "use_cache": {
            "$ref": "#/components/schemas/CacheUsage",
            "default": "auto"
          },
          "metadata": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "Additional metadata to store with the task run."
          },
          "labels": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "uniqueItems": true
              },
              {
                "type": "null"
              }
            ],
            "title": "Labels",
            "description": "A list of labels for the task run. Labels are indexed and searchable",
            "deprecated": true
          },
          "private_fields": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "type": "string",
                      "const": "task_input"
                    },
                    {
                      "type": "string"
                    }
                  ]
                },
                "type": "array",
                "uniqueItems": true
              },
              {
                "type": "null"
              }
            ],
            "title": "Private Fields",
            "description": "Fields marked as private will not be saved, none by default."
          }
        },
        "type": "object",
        "required": ["task_input", "version"],
        "title": "RunRequest"
      },
      "RunSnippet": {
        "properties": {
          "language": {
            "type": "string",
            "const": "python",
            "title": "Language",
            "default": "python"
          },
          "common": {
            "type": "string",
            "title": "Common"
          },
          "run": {
            "$ref": "#/components/schemas/CodeBlock"
          },
          "stream": {
            "$ref": "#/components/schemas/CodeBlock"
          }
        },
        "type": "object",
        "required": ["common", "run", "stream"],
        "title": "RunSnippet"
      },
      "RunV1": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "the id of the task run"
          },
          "task_id": {
            "type": "string",
            "title": "Task Id",
            "description": "the id of the task"
          },
          "task_schema_id": {
            "type": "integer",
            "title": "Task Schema Id",
            "description": "The id of the task run's schema"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "status": {
            "type": "string",
            "enum": ["success", "failure"],
            "title": "Status"
          },
          "duration_seconds": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Duration Seconds"
          },
          "cost_usd": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cost Usd"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The time the task run was created"
          },
          "user_review": {
            "anyOf": [
              {
                "type": "string",
                "enum": ["positive", "negative"]
              },
              {
                "type": "null"
              }
            ],
            "title": "User Review"
          },
          "ai_review": {
            "anyOf": [
              {
                "type": "string",
                "enum": ["positive", "negative", "unsure", "in_progress"]
              },
              {
                "type": "null"
              }
            ],
            "title": "Ai Review"
          },
          "task_input": {
            "$ref": "#/components/schemas/TaskInputDict"
          },
          "task_output": {
            "$ref": "#/components/schemas/TaskOutputDict"
          },
          "reasoning_steps": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ReasoningStep"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reasoning Steps"
          },
          "error": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/api__routers__runs_v1__RunV1__Error"
              },
              {
                "type": "null"
              }
            ]
          },
          "tool_call_requests": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/APIToolCallRequest"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Call Requests",
            "description": "Tool calls that should be executed client side."
          }
        },
        "type": "object",
        "required": [
          "id",
          "task_id",
          "task_schema_id",
          "version",
          "status",
          "duration_seconds",
          "cost_usd",
          "created_at",
          "user_review",
          "ai_review",
          "task_input",
          "task_output",
          "reasoning_steps",
          "error",
          "tool_call_requests"
        ],
        "title": "RunV1"
      },
      "SearchFields": {
        "properties": {
          "fields": {
            "items": {
              "$ref": "#/components/schemas/Item"
            },
            "type": "array",
            "title": "Fields",
            "description": "The fields that can be used in the search"
          }
        },
        "type": "object",
        "required": ["fields"],
        "title": "SearchFields"
      },
      "SearchOperator": {
        "type": "string",
        "enum": [
          "is",
          "is not",
          "is empty",
          "is not empty",
          "contains",
          "does not contain",
          "greater than",
          "greater than or equal to",
          "less than",
          "less than or equal to",
          "is between",
          "is not between",
          "is before",
          "is after"
        ],
        "title": "SearchOperator"
      },
      "SearchTaskRunsRequest": {
        "properties": {
          "field_queries": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/FieldQuery"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Field Queries",
            "description": "Optional list of field queries for searching task runs"
          },
          "limit": {
            "type": "integer",
            "title": "Limit",
            "default": 20
          },
          "offset": {
            "type": "integer",
            "title": "Offset",
            "default": 0
          }
        },
        "type": "object",
        "title": "SearchTaskRunsRequest"
      },
      "SerializableTask": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "is_public": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Public",
            "default": false
          },
          "tenant": {
            "type": "string",
            "title": "Tenant",
            "default": ""
          },
          "average_cost_usd": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Average Cost Usd"
          },
          "run_count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Run Count"
          },
          "versions": {
            "items": {
              "$ref": "#/components/schemas/PartialTaskVersion"
            },
            "type": "array",
            "title": "Versions"
          }
        },
        "type": "object",
        "required": ["id", "name", "versions"],
        "title": "SerializableTask"
      },
      "SerializableTaskIO": {
        "properties": {
          "version": {
            "type": "string",
            "title": "Version",
            "description": "the version of the schema definition. Titles and descriptions are ignored."
          },
          "json_schema": {
            "type": "object",
            "title": "Json Schema",
            "description": "A json schema"
          }
        },
        "type": "object",
        "required": ["version", "json_schema"],
        "title": "SerializableTaskIO"
      },
      "SerializableTaskRun": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "the id of the task run. If not provided a uuid will be generated"
          },
          "task_uid": {
            "type": "integer",
            "title": "Task Uid",
            "description": "the uid of the task",
            "default": 0
          },
          "task_id": {
            "type": "string",
            "title": "Task Id",
            "description": "the id of the associated task, read only",
            "examples": [""]
          },
          "task_schema_id": {
            "type": "integer",
            "title": "Task Schema Id",
            "description": "the schema idx of the associated task, read only"
          },
          "task_input_hash": {
            "type": "string",
            "title": "Task Input Hash",
            "description": "a hash describing the input"
          },
          "task_input_preview": {
            "type": "string",
            "title": "Task Input Preview",
            "description": "A preview of the input data. This is used to display the input data in the UI.",
            "default": ""
          },
          "task_output_hash": {
            "type": "string",
            "title": "Task Output Hash",
            "description": "a hash describing the output"
          },
          "task_output_preview": {
            "type": "string",
            "title": "Task Output Preview",
            "description": "A preview of the output data. This is used to display the output data in the UI.",
            "default": ""
          },
          "group": {
            "$ref": "#/components/schemas/TaskGroup"
          },
          "status": {
            "type": "string",
            "enum": ["success", "failure"],
            "title": "Status",
            "default": "success"
          },
          "error": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/core__domain__error_response__ErrorResponse__Error"
              },
              {
                "type": "null"
              }
            ]
          },
          "duration_seconds": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Duration Seconds"
          },
          "cost_usd": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cost Usd"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The time the task run was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "The time the task run was last updated"
          },
          "example_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Example Id",
            "description": "The id of the example that share the same input as the task run"
          },
          "user_review": {
            "anyOf": [
              {
                "type": "string",
                "enum": ["positive", "negative"]
              },
              {
                "type": "null"
              }
            ],
            "title": "User Review"
          },
          "ai_review": {
            "anyOf": [
              {
                "type": "string",
                "enum": ["in_progress", "positive", "negative", "unsure"]
              },
              {
                "type": "null"
              }
            ],
            "title": "Ai Review"
          },
          "author_tenant": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Author Tenant"
          },
          "author_uid": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Author Uid"
          },
          "eval_hash": {
            "type": "string",
            "title": "Eval Hash",
            "default": ""
          },
          "task_input": {
            "$ref": "#/components/schemas/TaskInputDict"
          },
          "task_output": {
            "$ref": "#/components/schemas/TaskOutputDict"
          },
          "start_time": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Start Time"
          },
          "end_time": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "End Time"
          },
          "corrections": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Corrections",
            "description": "The corrections that were applied to the task output if used as a base for an evaluation"
          },
          "labels": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "uniqueItems": true
              },
              {
                "type": "null"
              }
            ],
            "title": "Labels",
            "description": "A set of labels that are attached to the task runs. They are indexed."
          },
          "metadata": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "A user set metadata key / value. Keys are not searchable."
          },
          "llm_completions": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/LLMCompletion"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Llm Completions",
            "description": "A list of raw completions used to generate the task output"
          },
          "config_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Config Id",
            "description": "The id of the config that was used to run the task"
          },
          "is_free": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Free"
          },
          "from_cache": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "From Cache"
          },
          "private_fields": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "uniqueItems": true
              },
              {
                "type": "null"
              }
            ],
            "title": "Private Fields"
          },
          "is_active": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Active",
            "description": "Whether the task run is triggered using sdk/api"
          },
          "reasoning_steps": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/InternalReasoningStep"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reasoning Steps"
          },
          "tool_calls": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ToolCall"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Calls",
            "description": "A list of tool calls used to generate the task output"
          },
          "tool_call_requests": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ToolCallRequestWithID"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Call Requests"
          },
          "version_changed": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version Changed"
          },
          "is_external": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is External"
          }
        },
        "type": "object",
        "required": [
          "id",
          "task_id",
          "task_schema_id",
          "task_input_hash",
          "task_output_hash",
          "group",
          "task_input",
          "task_output"
        ],
        "title": "SerializableTaskRun",
        "description": "A task run represents an instance of a task being executed"
      },
      "SerializableTaskVariant": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "the task version id, computed based on the other parameters. Read only."
          },
          "task_id": {
            "type": "string",
            "title": "Task Id",
            "description": "the task id, stable accross all versions",
            "default": ""
          },
          "task_uid": {
            "type": "integer",
            "title": "Task Uid",
            "default": 0
          },
          "task_schema_id": {
            "type": "integer",
            "title": "Task Schema Id",
            "description": "The task schema idx. The schema index only changes when the types\n        of the input / ouput objects change so all task versions with the same schema idx\n        have compatible input / output objects. Read only",
            "default": 0
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "the task display name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "a concise task description"
          },
          "input_schema": {
            "$ref": "#/components/schemas/SerializableTaskIO"
          },
          "output_schema": {
            "$ref": "#/components/schemas/SerializableTaskIO"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "is_public": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Public"
          },
          "creation_chat_messages": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ChatMessage"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Creation Chat Messages"
          }
        },
        "type": "object",
        "required": ["id", "name", "input_schema", "output_schema"],
        "title": "SerializableTaskVariant"
      },
      "ShortVersionProperties": {
        "properties": {
          "model": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Model",
            "description": "The LLM model used for the run"
          },
          "model_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Model Name",
            "description": "The name of the model"
          },
          "model_icon": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Model Icon",
            "description": "The icon of the model"
          },
          "provider": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Provider",
            "description": "The LLM provider used for the run"
          },
          "temperature": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Temperature",
            "description": "The temperature for generation"
          }
        },
        "type": "object",
        "title": "ShortVersionProperties"
      },
      "Snippet": {
        "properties": {
          "language": {
            "type": "string",
            "enum": ["python", "bash"],
            "title": "Language"
          },
          "code": {
            "type": "string",
            "title": "Code"
          }
        },
        "type": "object",
        "required": ["language", "code"],
        "title": "Snippet"
      },
      "StandardMessage": {
        "properties": {
          "role": {
            "anyOf": [
              {
                "type": "string",
                "enum": ["system", "user", "assistant"]
              },
              {
                "type": "null"
              }
            ],
            "title": "Role"
          },
          "content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/TextContentDict"
                    },
                    {
                      "$ref": "#/components/schemas/ImageContentDict"
                    },
                    {
                      "$ref": "#/components/schemas/AudioContentDict"
                    },
                    {
                      "$ref": "#/components/schemas/DocumentContentDict"
                    },
                    {
                      "$ref": "#/components/schemas/ToolCallRequestDict"
                    },
                    {
                      "$ref": "#/components/schemas/ToolCallResultDict"
                    }
                  ]
                },
                "type": "array"
              }
            ],
            "title": "Content"
          }
        },
        "type": "object",
        "required": ["role", "content"],
        "title": "StandardMessage"
      },
      "TagPreview": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "kind": {
            "type": "string",
            "enum": ["static", "company_specific"],
            "title": "Kind"
          }
        },
        "type": "object",
        "required": ["name", "kind"],
        "title": "TagPreview"
      },
      "TaskEvaluationPatchRequest": {
        "properties": {
          "evaluation_instructions": {
            "type": "string",
            "title": "Evaluation Instructions"
          }
        },
        "type": "object",
        "required": ["evaluation_instructions"],
        "title": "TaskEvaluationPatchRequest"
      },
      "TaskEvaluationResponse": {
        "properties": {
          "evaluation_instructions": {
            "type": "string",
            "title": "Evaluation Instructions",
            "description": "The task level instructions for the AI reviewer. The instructions are passed with every evaluation."
          }
        },
        "type": "object",
        "required": ["evaluation_instructions"],
        "title": "TaskEvaluationResponse"
      },
      "TaskGenerateRequest": {
        "properties": {
          "description": {
            "type": "string",
            "title": "Description"
          }
        },
        "type": "object",
        "required": ["description"],
        "title": "TaskGenerateRequest"
      },
      "TaskGenerateResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "input_schema": {
            "type": "object",
            "title": "Input Schema"
          },
          "output_schema": {
            "type": "object",
            "title": "Output Schema"
          }
        },
        "type": "object",
        "required": ["name", "input_schema", "output_schema"],
        "title": "TaskGenerateResponse"
      },
      "TaskGroup": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The group id either client provided or generated, stable for given set of properties",
            "default": ""
          },
          "semver": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/MajorMinor"
              },
              {
                "type": "null"
              }
            ],
            "description": "The semantic version of the task group"
          },
          "schema_id": {
            "type": "integer",
            "title": "Schema Id",
            "description": "The schema id of the task group, incremented for each new schema",
            "default": 0
          },
          "iteration": {
            "type": "integer",
            "title": "Iteration",
            "description": "The iteration of the group, incremented for each new group",
            "default": 0
          },
          "run_count": {
            "type": "integer",
            "title": "Run Count",
            "description": "The number of runs in the group",
            "default": 0
          },
          "properties": {
            "$ref": "#/components/schemas/TaskGroupProperties-Output",
            "description": "The properties used for executing the run."
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags",
            "description": "A list of tags associated with the group. When empty, tags are computed from the properties."
          },
          "aliases": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "uniqueItems": true
              },
              {
                "type": "null"
              }
            ],
            "title": "Aliases",
            "description": "A list of aliases to use in place of iteration or id. An alias can be used to uniquely identify a group for a given task. "
          },
          "is_external": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is External",
            "description": "Whether the group is external, i-e not creating by internal runners"
          },
          "is_favorite": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Favorite",
            "description": "Indicates if the task group is marked as favorite"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes",
            "description": "Additional notes or comments about the task group"
          },
          "similarity_hash": {
            "type": "string",
            "title": "Similarity Hash",
            "description": "A hash computed based on task group properties, used for similarity comparisons",
            "default": ""
          },
          "benchmark_for_datasets": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "uniqueItems": true
              },
              {
                "type": "null"
              }
            ],
            "title": "Benchmark For Datasets"
          },
          "favorited_by": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/core__domain__users__UserIdentifier"
              },
              {
                "type": "null"
              }
            ],
            "description": "The user who favorited the task group"
          },
          "created_by": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/core__domain__users__UserIdentifier"
              },
              {
                "type": "null"
              }
            ],
            "description": "The user who created the task group"
          },
          "deployed_by": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/core__domain__users__UserIdentifier"
              },
              {
                "type": "null"
              }
            ],
            "description": "The user who deployed the task group"
          },
          "last_active_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Active At",
            "description": "The last time the task group was active"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At",
            "description": "The time the task group was created"
          }
        },
        "type": "object",
        "required": [
          "id",
          "iteration",
          "tags",
          "properties",
          "similarity_hash"
        ],
        "title": "TaskGroup"
      },
      "TaskGroupProperties-Input": {
        "properties": {
          "model": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Model",
            "description": "The LLM model used for the run"
          },
          "provider": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Provider",
            "description": "The LLM provider used for the run"
          },
          "temperature": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Temperature",
            "description": "The temperature for generation"
          },
          "instructions": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Instructions",
            "description": "The instructions passed to the runner in order to generate the prompt."
          },
          "max_tokens": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Tokens",
            "description": "The maximum tokens to generate in the prompt"
          },
          "runner_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Runner Name",
            "description": "The name of the runner used"
          },
          "runner_version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Runner Version",
            "description": "The version of the runner used"
          },
          "few_shot": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/FewShotConfiguration"
              },
              {
                "type": "null"
              }
            ],
            "description": "Few shot configuration"
          },
          "template_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Template Name",
            "description": "The template name used for the task"
          },
          "is_chain_of_thought_enabled": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Chain Of Thought Enabled",
            "description": "Whether to use chain of thought prompting for the task"
          },
          "enabled_tools": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ToolKind"
                    },
                    {
                      "$ref": "#/components/schemas/core__domain__tasks__tool__Tool"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Enabled Tools"
          },
          "is_structured_generation_enabled": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Structured Generation Enabled",
            "description": "Whether to use structured generation for the task"
          },
          "has_templated_instructions": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Has Templated Instructions"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "title": "TaskGroupProperties",
        "description": "Properties that described a way a task run was executed.\nAlthough some keys are provided as an example, any key:value are accepted"
      },
      "TaskGroupProperties-Output": {
        "properties": {
          "model": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Model",
            "description": "The LLM model used for the run"
          },
          "provider": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Provider",
            "description": "The LLM provider used for the run"
          },
          "temperature": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Temperature",
            "description": "The temperature for generation"
          },
          "instructions": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Instructions",
            "description": "The instructions passed to the runner in order to generate the prompt."
          },
          "max_tokens": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Tokens",
            "description": "The maximum tokens to generate in the prompt"
          },
          "runner_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Runner Name",
            "description": "The name of the runner used"
          },
          "runner_version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Runner Version",
            "description": "The version of the runner used"
          },
          "few_shot": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/FewShotConfiguration"
              },
              {
                "type": "null"
              }
            ],
            "description": "Few shot configuration"
          },
          "template_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Template Name",
            "description": "The template name used for the task"
          },
          "is_chain_of_thought_enabled": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Chain Of Thought Enabled",
            "description": "Whether to use chain of thought prompting for the task"
          },
          "enabled_tools": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ToolKind"
                    },
                    {
                      "$ref": "#/components/schemas/Tool-Output"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Enabled Tools"
          },
          "is_structured_generation_enabled": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Structured Generation Enabled",
            "description": "Whether to use structured generation for the task"
          },
          "has_templated_instructions": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Has Templated Instructions"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "title": "TaskGroupProperties",
        "description": "Properties that described a way a task run was executed.\nAlthough some keys are provided as an example, any key:value are accepted"
      },
      "TaskGroupUpdate": {
        "properties": {
          "add_alias": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Add Alias",
            "description": "A new alias for the group. If the alias is already used in another group of the task schema, it will be removed from the other group.",
            "deprecated": true
          },
          "remove_alias": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Remove Alias",
            "description": "An alias to remove from the group. The request is a noop if the group does not have the alias.",
            "deprecated": true
          },
          "is_favorite": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Favorite",
            "description": "Set to True to mark the group as a favorite, False to unmark it, or None to leave it unchanged."
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes",
            "description": "Additional notes or comments about the task group. Set to None to leave unchanged."
          },
          "last_active_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Active At",
            "description": "The last time the task group was active."
          }
        },
        "type": "object",
        "title": "TaskGroupUpdate",
        "description": "Model representing an update to a task group."
      },
      "TaskGroupWithCost": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The group id either client provided or generated, stable for given set of properties",
            "default": ""
          },
          "semver": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/MajorMinor"
              },
              {
                "type": "null"
              }
            ],
            "description": "The semantic version of the task group"
          },
          "schema_id": {
            "type": "integer",
            "title": "Schema Id",
            "description": "The schema id of the task group, incremented for each new schema",
            "default": 0
          },
          "iteration": {
            "type": "integer",
            "title": "Iteration",
            "description": "The iteration of the group, incremented for each new group",
            "default": 0
          },
          "run_count": {
            "type": "integer",
            "title": "Run Count",
            "description": "The number of runs in the group",
            "default": 0
          },
          "properties": {
            "$ref": "#/components/schemas/TaskGroupProperties-Output",
            "description": "The properties used for executing the run."
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags",
            "description": "A list of tags associated with the group. When empty, tags are computed from the properties."
          },
          "aliases": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "uniqueItems": true
              },
              {
                "type": "null"
              }
            ],
            "title": "Aliases",
            "description": "A list of aliases to use in place of iteration or id. An alias can be used to uniquely identify a group for a given task. "
          },
          "is_external": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is External",
            "description": "Whether the group is external, i-e not creating by internal runners"
          },
          "is_favorite": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Favorite",
            "description": "Indicates if the task group is marked as favorite"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes",
            "description": "Additional notes or comments about the task group"
          },
          "similarity_hash": {
            "type": "string",
            "title": "Similarity Hash",
            "description": "A hash computed based on task group properties, used for similarity comparisons",
            "default": ""
          },
          "benchmark_for_datasets": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "uniqueItems": true
              },
              {
                "type": "null"
              }
            ],
            "title": "Benchmark For Datasets"
          },
          "favorited_by": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/core__domain__users__UserIdentifier"
              },
              {
                "type": "null"
              }
            ],
            "description": "The user who favorited the task group"
          },
          "created_by": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/core__domain__users__UserIdentifier"
              },
              {
                "type": "null"
              }
            ],
            "description": "The user who created the task group"
          },
          "deployed_by": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/core__domain__users__UserIdentifier"
              },
              {
                "type": "null"
              }
            ],
            "description": "The user who deployed the task group"
          },
          "last_active_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Active At",
            "description": "The last time the task group was active"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At",
            "description": "The time the task group was created"
          },
          "cost_estimate_usd": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cost Estimate Usd"
          }
        },
        "type": "object",
        "required": [
          "id",
          "iteration",
          "tags",
          "properties",
          "similarity_hash"
        ],
        "title": "TaskGroupWithCost"
      },
      "TaskInputDict": {
        "type": "object"
      },
      "TaskOutputDict": {
        "type": "object"
      },
      "TaskPreview": {
        "properties": {
          "input": {
            "type": "object",
            "title": "Input",
            "description": "The preview input for the task"
          },
          "output": {
            "type": "object",
            "title": "Output",
            "description": "The preview output for the task"
          }
        },
        "type": "object",
        "required": ["input", "output"],
        "title": "TaskPreview"
      },
      "TaskSchemaResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "task_id": {
            "type": "string",
            "title": "Task Id"
          },
          "schema_id": {
            "type": "integer",
            "title": "Schema Id"
          },
          "input_schema": {
            "$ref": "#/components/schemas/SerializableTaskIO"
          },
          "output_schema": {
            "$ref": "#/components/schemas/SerializableTaskIO"
          },
          "is_hidden": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Hidden"
          },
          "last_active_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Active At"
          },
          "latest_variant_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Latest Variant Id"
          }
        },
        "type": "object",
        "required": [
          "name",
          "task_id",
          "schema_id",
          "input_schema",
          "output_schema"
        ],
        "title": "TaskSchemaResponse"
      },
      "TaskSchemaUpdateRequest": {
        "properties": {
          "is_hidden": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Hidden"
          }
        },
        "type": "object",
        "title": "TaskSchemaUpdateRequest"
      },
      "TaskStats": {
        "properties": {
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          },
          "total_cost_usd": {
            "type": "number",
            "title": "Total Cost Usd"
          },
          "date": {
            "type": "string",
            "title": "Date"
          }
        },
        "type": "object",
        "required": ["total_count", "total_cost_usd", "date"],
        "title": "TaskStats"
      },
      "TaskStatsResponse": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/TaskStats"
            },
            "type": "array",
            "title": "Data"
          }
        },
        "type": "object",
        "required": ["data"],
        "title": "TaskStatsResponse"
      },
      "TextContentDict": {
        "properties": {
          "type": {
            "type": "string",
            "const": "text",
            "title": "Type"
          },
          "text": {
            "type": "string",
            "title": "Text"
          }
        },
        "type": "object",
        "required": ["type", "text"],
        "title": "TextContentDict"
      },
      "Tool-Output": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the tool"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the tool",
            "default": ""
          },
          "input_schema": {
            "type": "object",
            "title": "Input Schema",
            "description": "The input class of the tool"
          },
          "output_schema": {
            "type": "object",
            "title": "Output Schema",
            "description": "The output class of the tool"
          }
        },
        "type": "object",
        "required": ["name", "input_schema", "output_schema"],
        "title": "Tool"
      },
      "ToolCall": {
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "name": {
            "description": "The name of the tool that was executed",
            "title": "Name",
            "type": "string"
          },
          "input_preview": {
            "description": "A preview of the input to the tool",
            "title": "Input Preview",
            "type": "string"
          },
          "output_preview": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "A preview of the output of the tool",
            "title": "Output Preview"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The error that occurred during the tool call if any",
            "title": "Error"
          }
        },
        "required": ["id", "name", "input_preview", "output_preview", "error"],
        "title": "ToolCall",
        "type": "object"
      },
      "ToolCallRequestDict": {
        "properties": {
          "type": {
            "type": "string",
            "const": "tool_call_request",
            "title": "Type"
          },
          "id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id"
          },
          "tool_name": {
            "type": "string",
            "title": "Tool Name"
          },
          "tool_input_dict": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Input Dict"
          }
        },
        "type": "object",
        "required": ["type", "id", "tool_name", "tool_input_dict"],
        "title": "ToolCallRequestDict"
      },
      "ToolCallRequestWithID": {
        "properties": {
          "tool_name": {
            "type": "string",
            "title": "Tool Name",
            "description": "The name of the tool called",
            "examples": ["WeatherCheckTask", "ReplyToUserTask"]
          },
          "tool_input_dict": {
            "type": "object",
            "title": "Tool Input Dict",
            "description": "The input of the tool call",
            "examples": [
              {
                "date": "2021-09-01",
                "location": {
                  "latitude": 48.8566,
                  "longitude": 2.3522
                }
              },
              {
                "content": "Glad I could help!"
              }
            ]
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The id of the tool call",
            "default": ""
          }
        },
        "type": "object",
        "required": ["tool_name", "tool_input_dict"],
        "title": "ToolCallRequestWithID"
      },
      "ToolCallResult": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "output": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ],
            "title": "Output"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error"
          }
        },
        "type": "object",
        "required": ["id"],
        "title": "ToolCallResult"
      },
      "ToolCallResultDict": {
        "properties": {
          "type": {
            "type": "string",
            "const": "tool_call_result",
            "title": "Type"
          },
          "id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id"
          },
          "tool_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Name"
          },
          "tool_input_dict": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Input Dict"
          },
          "result": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ],
            "title": "Result"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error"
          }
        },
        "type": "object",
        "required": [
          "type",
          "id",
          "tool_name",
          "tool_input_dict",
          "result",
          "error"
        ],
        "title": "ToolCallResultDict"
      },
      "ToolCreationRequest": {
        "properties": {
          "messages": {
            "items": {
              "$ref": "#/components/schemas/CustomToolCreationChatMessage"
            },
            "type": "array",
            "title": "Messages",
            "description": "The list of previous messages in the conversation, the last message is the most recent one"
          }
        },
        "type": "object",
        "required": ["messages"],
        "title": "ToolCreationRequest"
      },
      "ToolInputExampleRequest": {
        "properties": {
          "tool": {
            "$ref": "#/components/schemas/api__routers__agents__new_tool_agent__ToolInputExampleRequest__Tool",
            "description": "The tool to generate an example input for"
          }
        },
        "type": "object",
        "required": ["tool"],
        "title": "ToolInputExampleRequest"
      },
      "ToolKind": {
        "enum": [
          "@search-google",
          "@perplexity-sonar",
          "@perplexity-sonar-reasoning",
          "@perplexity-sonar-pro",
          "@browser-text"
        ],
        "title": "ToolKind",
        "type": "string"
      },
      "ToolOutputExampleRequest": {
        "properties": {
          "tool": {
            "$ref": "#/components/schemas/api__routers__agents__new_tool_agent__ToolOutputExampleRequest__Tool",
            "description": "The tool to generate an example output for"
          },
          "tool_input": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Input",
            "description": "The input of the tool to generate an example output for, if any"
          }
        },
        "type": "object",
        "required": ["tool"],
        "title": "ToolOutputExampleRequest"
      },
      "UpdateTaskInstructionsRequest": {
        "properties": {
          "instructions": {
            "type": "string",
            "title": "Instructions"
          },
          "selected_tools": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ToolKind"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Selected Tools",
            "description": "The tools to include in the instructions. Any tool not listed here will be removed from the instructions.\n        If 'selected_tools' is None, no tools will be added or removed from the instructions."
          }
        },
        "type": "object",
        "required": ["instructions"],
        "title": "UpdateTaskInstructionsRequest"
      },
      "UpdateTaskRequest": {
        "properties": {
          "is_public": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Public",
            "description": "whether the task is public"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "the task display name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "the task description"
          }
        },
        "type": "object",
        "title": "UpdateTaskRequest"
      },
      "UpdateVersionNotesRequest": {
        "properties": {
          "notes": {
            "type": "string",
            "title": "Notes"
          }
        },
        "type": "object",
        "required": ["notes"],
        "title": "UpdateVersionNotesRequest"
      },
      "UploadFileResponse": {
        "properties": {
          "url": {
            "type": "string",
            "title": "Url"
          }
        },
        "type": "object",
        "required": ["url"],
        "title": "UploadFileResponse"
      },
      "UserReviewer": {
        "properties": {
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          },
          "user_email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Email",
            "description": "The user email"
          },
          "reviewer_type": {
            "type": "string",
            "const": "user",
            "title": "Reviewer Type",
            "default": "user"
          }
        },
        "type": "object",
        "title": "UserReviewer"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": ["loc", "msg", "type"],
        "title": "ValidationError"
      },
      "Version": {
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/TaskGroupProperties"
          }
        },
        "required": ["properties"],
        "title": "Version",
        "type": "object"
      },
      "VersionDeploymentMetadata": {
        "properties": {
          "environment": {
            "$ref": "#/components/schemas/VersionEnvironment"
          },
          "deployed_at": {
            "type": "string",
            "format": "date-time",
            "title": "Deployed At"
          },
          "deployed_by": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/api__schemas__user_identifier__UserIdentifier"
              },
              {
                "type": "null"
              }
            ]
          },
          "provider_config_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Provider Config Id"
          }
        },
        "type": "object",
        "required": [
          "environment",
          "deployed_at",
          "deployed_by",
          "provider_config_id"
        ],
        "title": "VersionDeploymentMetadata"
      },
      "VersionEnvironment": {
        "type": "string",
        "enum": ["dev", "staging", "production"],
        "title": "VersionEnvironment"
      },
      "VersionResult": {
        "properties": {
          "iteration": {
            "type": "integer",
            "title": "Iteration"
          },
          "properties": {
            "$ref": "#/components/schemas/ShortVersionProperties"
          },
          "positive_review_count": {
            "type": "integer",
            "title": "Positive Review Count",
            "description": "The number of positive reviews for the version"
          },
          "positive_user_review_count": {
            "type": "integer",
            "title": "Positive User Review Count",
            "description": "The number of positive reviews that were left by users"
          },
          "negative_review_count": {
            "type": "integer",
            "title": "Negative Review Count",
            "description": "The number of negative reviews for the version,including both runs that were rejected and runs that failed because the output was invalid"
          },
          "negative_user_review_count": {
            "type": "integer",
            "title": "Negative User Review Count",
            "description": "The number of negative reviews that were left by users"
          },
          "unsure_review_count": {
            "type": "integer",
            "title": "Unsure Review Count",
            "description": "The number of unsure reviews for the version"
          },
          "in_progress_review_count": {
            "type": "integer",
            "title": "In Progress Review Count",
            "description": "The number of reviews that are still in progress for the version, either becausethe run has not yet completed or because the review has not yet been computed"
          },
          "average_cost_usd": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Average Cost Usd"
          },
          "average_duration_seconds": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Average Duration Seconds"
          }
        },
        "type": "object",
        "required": [
          "iteration",
          "properties",
          "positive_review_count",
          "positive_user_review_count",
          "negative_review_count",
          "negative_user_review_count",
          "unsure_review_count",
          "in_progress_review_count",
          "average_cost_usd",
          "average_duration_seconds"
        ],
        "title": "VersionResult"
      },
      "VersionV1": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The id of the full version"
          },
          "iteration": {
            "type": "integer",
            "title": "Iteration",
            "deprecated": true
          },
          "model": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Model"
              },
              {
                "type": "string"
              }
            ],
            "title": "Model"
          },
          "deployments": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/VersionDeploymentMetadata"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Deployments"
          },
          "cost_estimate_usd": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cost Estimate Usd"
          },
          "last_active_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Active At",
            "description": "The last time the task version minor was active"
          },
          "is_favorite": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Favorite"
          },
          "favorited_by": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/api__schemas__user_identifier__UserIdentifier"
              },
              {
                "type": "null"
              }
            ]
          },
          "created_by": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/api__schemas__user_identifier__UserIdentifier"
              },
              {
                "type": "null"
              }
            ]
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          },
          "run_count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Run Count"
          },
          "schema_id": {
            "type": "integer",
            "title": "Schema Id"
          },
          "semver": {
            "anyOf": [
              {
                "prefixItems": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "integer"
                  }
                ],
                "type": "array",
                "maxItems": 2,
                "minItems": 2
              },
              {
                "type": "null"
              }
            ],
            "title": "Semver"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "properties": {
            "$ref": "#/components/schemas/FullVersionProperties"
          },
          "input_schema": {
            "type": "object",
            "title": "Input Schema",
            "description": "The full input schema used for this version. Includes descriptions and examples"
          },
          "output_schema": {
            "type": "object",
            "title": "Output Schema",
            "description": "The full output schema used for this version. Includes descriptions and examples"
          }
        },
        "type": "object",
        "required": [
          "id",
          "iteration",
          "model",
          "deployments",
          "cost_estimate_usd",
          "last_active_at",
          "is_favorite",
          "favorited_by",
          "created_by",
          "notes",
          "run_count",
          "schema_id",
          "semver",
          "created_at",
          "properties",
          "input_schema",
          "output_schema"
        ],
        "title": "VersionV1"
      },
      "VersionsResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The group id either client provided or generated, stable for given set of properties",
            "default": ""
          },
          "semver": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/MajorMinor"
              },
              {
                "type": "null"
              }
            ],
            "description": "The semantic version of the task group"
          },
          "schema_id": {
            "type": "integer",
            "title": "Schema Id",
            "description": "The schema id of the task group, incremented for each new schema",
            "default": 0
          },
          "iteration": {
            "type": "integer",
            "title": "Iteration",
            "description": "The iteration of the group, incremented for each new group",
            "default": 0
          },
          "run_count": {
            "type": "integer",
            "title": "Run Count",
            "description": "The number of runs in the group",
            "default": 0
          },
          "properties": {
            "$ref": "#/components/schemas/TaskGroupProperties-Output",
            "description": "The properties used for executing the run."
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags",
            "description": "A list of tags associated with the group. When empty, tags are computed from the properties."
          },
          "aliases": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "uniqueItems": true
              },
              {
                "type": "null"
              }
            ],
            "title": "Aliases",
            "description": "A list of aliases to use in place of iteration or id. An alias can be used to uniquely identify a group for a given task. "
          },
          "is_external": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is External",
            "description": "Whether the group is external, i-e not creating by internal runners"
          },
          "is_favorite": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Favorite",
            "description": "Indicates if the task group is marked as favorite"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes",
            "description": "Additional notes or comments about the task group"
          },
          "similarity_hash": {
            "type": "string",
            "title": "Similarity Hash",
            "description": "A hash computed based on task group properties, used for similarity comparisons",
            "default": ""
          },
          "benchmark_for_datasets": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "uniqueItems": true
              },
              {
                "type": "null"
              }
            ],
            "title": "Benchmark For Datasets"
          },
          "favorited_by": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/core__domain__users__UserIdentifier"
              },
              {
                "type": "null"
              }
            ],
            "description": "The user who favorited the task group"
          },
          "created_by": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/core__domain__users__UserIdentifier"
              },
              {
                "type": "null"
              }
            ],
            "description": "The user who created the task group"
          },
          "deployed_by": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/core__domain__users__UserIdentifier"
              },
              {
                "type": "null"
              }
            ],
            "description": "The user who deployed the task group"
          },
          "last_active_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Active At",
            "description": "The last time the task group was active"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At",
            "description": "The time the task group was created"
          },
          "recent_runs_count": {
            "type": "integer",
            "title": "Recent Runs Count",
            "default": 0
          }
        },
        "type": "object",
        "required": [
          "id",
          "iteration",
          "tags",
          "properties",
          "similarity_hash"
        ],
        "title": "VersionsResponse"
      },
      "api__routers__agents__new_tool_agent__ToolInputExampleRequest__Tool": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the tool to generate an example input for"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the tool to generate an example input for"
          },
          "parameters": {
            "type": "object",
            "title": "Parameters",
            "description": "The parameters of the tool in JSON Schema format"
          }
        },
        "type": "object",
        "required": ["name", "description", "parameters"],
        "title": "Tool"
      },
      "api__routers__agents__new_tool_agent__ToolOutputExampleRequest__Tool": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the tool to generate an example output for"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the tool to generate an example output for"
          }
        },
        "type": "object",
        "required": ["name", "description"],
        "title": "Tool"
      },
      "api__routers__runs_by_id__TranscriptionResponse": {
        "properties": {
          "transcriptions_by_keypath": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Transcriptions By Keypath"
          }
        },
        "type": "object",
        "required": ["transcriptions_by_keypath"],
        "title": "TranscriptionResponse"
      },
      "api__routers__runs_v1__RunItemV1__Error": {
        "properties": {
          "code": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "max_tokens_exceeded",
                  "failed_generation",
                  "invalid_generation",
                  "unknown_provider_error",
                  "rate_limit",
                  "server_overloaded",
                  "invalid_provider_config",
                  "provider_internal_error",
                  "provider_unavailable",
                  "read_timeout",
                  "model_does_not_support_mode",
                  "invalid_file",
                  "max_tool_call_iteration",
                  "structured_generation_error",
                  "content_moderation",
                  "task_banned",
                  "timeout",
                  "agent_run_failed",
                  "bad_request",
                  "missing_model"
                ]
              },
              {
                "type": "string",
                "enum": [
                  "object_not_found",
                  "version_not_found",
                  "agent_not_found",
                  "agent_input_not_found",
                  "agent_run_not_found",
                  "example_not_found",
                  "schema_not_found",
                  "score_not_found",
                  "evaluator_not_found",
                  "organization_not_found",
                  "config_not_found",
                  "no_provider_supporting_model",
                  "provider_does_not_support_model",
                  "invalid_run_properties",
                  "internal_error",
                  "bad_request",
                  "invalid_file",
                  "entity_too_large",
                  "unsupported_json_schema",
                  "card_validation_error"
                ]
              },
              {
                "type": "string"
              }
            ],
            "title": "Code"
          },
          "message": {
            "type": "string",
            "title": "Message"
          }
        },
        "type": "object",
        "required": ["code", "message"],
        "title": "Error"
      },
      "api__routers__runs_v1__RunV1__Error": {
        "properties": {
          "code": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "max_tokens_exceeded",
                  "failed_generation",
                  "invalid_generation",
                  "unknown_provider_error",
                  "rate_limit",
                  "server_overloaded",
                  "invalid_provider_config",
                  "provider_internal_error",
                  "provider_unavailable",
                  "read_timeout",
                  "model_does_not_support_mode",
                  "invalid_file",
                  "max_tool_call_iteration",
                  "structured_generation_error",
                  "content_moderation",
                  "task_banned",
                  "timeout",
                  "agent_run_failed",
                  "bad_request",
                  "missing_model"
                ]
              },
              {
                "type": "string",
                "enum": [
                  "object_not_found",
                  "version_not_found",
                  "agent_not_found",
                  "agent_input_not_found",
                  "agent_run_not_found",
                  "example_not_found",
                  "schema_not_found",
                  "score_not_found",
                  "evaluator_not_found",
                  "organization_not_found",
                  "config_not_found",
                  "no_provider_supporting_model",
                  "provider_does_not_support_model",
                  "invalid_run_properties",
                  "internal_error",
                  "bad_request",
                  "invalid_file",
                  "entity_too_large",
                  "unsupported_json_schema",
                  "card_validation_error"
                ]
              },
              {
                "type": "string"
              }
            ],
            "title": "Code"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "details": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Details"
          }
        },
        "type": "object",
        "required": ["code", "message", "details"],
        "title": "Error"
      },
      "api__routers__task_schemas_v1__CheckInstructionsResponse__Error": {
        "properties": {
          "message": {
            "type": "string",
            "title": "Message"
          },
          "line_number": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Line Number"
          },
          "missing_keys": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "uniqueItems": true
              },
              {
                "type": "null"
              }
            ],
            "title": "Missing Keys"
          }
        },
        "type": "object",
        "required": ["message", "line_number"],
        "title": "Error"
      },
      "api__routers__transcriptions__TranscriptionResponse": {
        "properties": {
          "transcription": {
            "type": "string",
            "title": "Transcription"
          }
        },
        "type": "object",
        "required": ["transcription"],
        "title": "TranscriptionResponse"
      },
      "api__schemas__user_identifier__UserIdentifier": {
        "properties": {
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          },
          "user_email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Email"
          }
        },
        "type": "object",
        "title": "UserIdentifier"
      },
      "core__domain__error_response__ErrorResponse__Error": {
        "properties": {
          "title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "details": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Details"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "default": ""
          },
          "status_code": {
            "type": "integer",
            "title": "Status Code",
            "default": 0
          },
          "code": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "max_tokens_exceeded",
                  "failed_generation",
                  "invalid_generation",
                  "unknown_provider_error",
                  "rate_limit",
                  "server_overloaded",
                  "invalid_provider_config",
                  "provider_internal_error",
                  "provider_unavailable",
                  "read_timeout",
                  "model_does_not_support_mode",
                  "invalid_file",
                  "max_tool_call_iteration",
                  "structured_generation_error",
                  "content_moderation",
                  "task_banned",
                  "timeout",
                  "agent_run_failed",
                  "bad_request",
                  "missing_model"
                ]
              },
              {
                "type": "string",
                "enum": [
                  "object_not_found",
                  "version_not_found",
                  "agent_not_found",
                  "agent_input_not_found",
                  "agent_run_not_found",
                  "example_not_found",
                  "schema_not_found",
                  "score_not_found",
                  "evaluator_not_found",
                  "organization_not_found",
                  "config_not_found",
                  "no_provider_supporting_model",
                  "provider_does_not_support_model",
                  "invalid_run_properties",
                  "internal_error",
                  "bad_request",
                  "invalid_file",
                  "entity_too_large",
                  "unsupported_json_schema",
                  "card_validation_error"
                ]
              },
              {
                "type": "string"
              }
            ],
            "title": "Code",
            "default": ""
          }
        },
        "type": "object",
        "title": "Error"
      },
      "core__domain__fields__custom_tool_creation_chat_message__CustomToolCreationChatMessage__Tool": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "The name of the tool"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the tool"
          },
          "parameters": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parameters",
            "description": "The parameters of the tool in JSON Schema format"
          }
        },
        "type": "object",
        "title": "Tool"
      },
      "core__domain__tasks__tool__Tool": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the tool"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the tool",
            "default": ""
          },
          "input_schema": {
            "type": "object",
            "title": "Input Schema",
            "description": "The input class of the tool"
          },
          "output_schema": {
            "type": "object",
            "title": "Output Schema",
            "description": "The output class of the tool"
          }
        },
        "type": "object",
        "required": ["name", "input_schema", "output_schema"],
        "title": "Tool"
      },
      "core__domain__users__UserIdentifier": {
        "properties": {
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          },
          "user_email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Email",
            "description": "The user email"
          }
        },
        "type": "object",
        "title": "UserIdentifier"
      },
      "TaskGroupProperties": {
        "additionalProperties": true,
        "description": "Properties that described a way a task run was executed.\nAlthough some keys are provided as an example, any key:value are accepted",
        "properties": {
          "model": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The LLM model used for the run",
            "title": "Model"
          },
          "provider": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The LLM provider used for the run",
            "title": "Provider"
          },
          "temperature": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "description": "The temperature for generation",
            "title": "Temperature"
          },
          "instructions": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The instructions passed to the runner in order to generate the prompt.",
            "title": "Instructions"
          },
          "max_tokens": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "The maximum tokens to generate in the prompt",
            "title": "Max Tokens"
          },
          "runner_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The name of the runner used",
            "title": "Runner Name"
          },
          "runner_version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The version of the runner used",
            "title": "Runner Version"
          },
          "few_shot": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/FewShotConfiguration"
              },
              {
                "type": "null"
              }
            ],
            "description": "Few shot configuration"
          },
          "template_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The template name used for the task",
            "title": "Template Name"
          },
          "is_chain_of_thought_enabled": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "description": "Whether to use chain of thought prompting for the task",
            "title": "Is Chain Of Thought Enabled"
          },
          "enabled_tools": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ToolKind"
                    },
                    {
                      "$ref": "#/components/schemas/Tool"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Enabled Tools"
          },
          "is_structured_generation_enabled": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "description": "Whether to use structured generation for the task",
            "title": "Is Structured Generation Enabled"
          },
          "has_templated_instructions": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Has Templated Instructions"
          }
        },
        "title": "TaskGroupProperties",
        "type": "object"
      },
      "Tool": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "The name of the tool"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the tool"
          },
          "parameters": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parameters",
            "description": "The parameters of the tool in JSON Schema format"
          }
        },
        "type": "object",
        "title": "Tool"
      },
      "RunResponse": {
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "task_output": {
            "title": "Task Output",
            "type": "object"
          },
          "tool_call_requests": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/APIToolCallRequest"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Tool calls that should be executed client side.",
            "title": "Tool Call Requests"
          },
          "reasoning_steps": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ReasoningStep"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "A list of reasoning steps that were taken during the run.Available for reasoning models or when the version used has chain of thoughts enabled",
            "title": "Reasoning Steps"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "duration_seconds": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Duration Seconds"
          },
          "cost_usd": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cost Usd"
          },
          "metadata": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          },
          "tool_calls": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/api__routers__run__RunResponse__ToolCall"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "A list of tools that were executed during the run.",
            "title": "Tool Calls"
          }
        },
        "required": [
          "id",
          "task_output",
          "tool_call_requests",
          "reasoning_steps",
          "version",
          "duration_seconds",
          "cost_usd",
          "metadata",
          "tool_calls"
        ],
        "title": "RunResponse",
        "type": "object"
      },
      "RunResponseStreamChunk": {
        "description": "A streamed chunk for a run request. The final chunk will be a RunResponse object.",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "task_output": {
            "title": "Task Output",
            "type": "object"
          },
          "tool_call_requests": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/APIToolCallRequest"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Tool calls that should be executed client side.",
            "title": "Tool Call Requests"
          },
          "reasoning_steps": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ReasoningStep"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "A list of reasoning steps that were taken during the run.Available for reasoning models or when the version used has chain of thoughts enabled",
            "title": "Reasoning Steps"
          },
          "tool_calls": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/api__routers__run__RunResponseStreamChunk__ToolCall"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "A list of WorkflowAI tool calls that are executed during the run.The full object is sent whenever the tool calls status changes and all hosted tools are sent in the final payload.In most cases, a tool will then be sent when the execution starts with status 'in_progress'and the final result preview with status 'success' or 'failed'.",
            "title": "Tool Calls"
          }
        },
        "required": [
          "id",
          "task_output",
          "tool_call_requests",
          "reasoning_steps",
          "tool_calls"
        ],
        "title": "RunResponseStreamChunk",
        "type": "object"
      },
      "api__routers__run__RunResponseStreamChunk__ToolCall": {
        "description": "A tool that was executed during the run",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "name": {
            "description": "The name of the tool that was executed",
            "title": "Name",
            "type": "string"
          },
          "status": {
            "description": "The status of the tool",
            "enum": ["in_progress", "success", "failed"],
            "title": "Status",
            "type": "string"
          },
          "input_preview": {
            "description": "A preview of the input to the tool",
            "title": "Input Preview",
            "type": "string"
          },
          "output_preview": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "A preview of the output of the tool, only available if the tool has successfully finished",
            "title": "Output Preview"
          }
        },
        "required": ["id", "name", "status", "input_preview", "output_preview"],
        "title": "ToolCall",
        "type": "object"
      },
      "api__routers__run__RunResponse__ToolCall": {
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "name": {
            "description": "The name of the tool that was executed",
            "title": "Name",
            "type": "string"
          },
          "input_preview": {
            "description": "A preview of the input to the tool",
            "title": "Input Preview",
            "type": "string"
          },
          "output_preview": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "A preview of the output of the tool",
            "title": "Output Preview"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The error that occurred during the tool call if any",
            "title": "Error"
          }
        },
        "required": ["id", "name", "input_preview", "output_preview", "error"],
        "title": "ToolCall",
        "type": "object"
      },
      "AgentSuggestionChatMessage": {
        "properties": {
          "role": {
            "anyOf": [
              {
                "type": "string",
                "enum": ["USER", "ASSISTANT"]
              },
              {
                "type": "null"
              }
            ],
            "title": "Role",
            "description": "The role of the message sender, either the user or the agent suggestion agent",
            "examples": ["USER", "ASSISTANT"]
          },
          "content_str": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Content Str",
            "description": "The content of the message",
            "examples": [
              "Thank you for your help!",
              "What is the weather forecast for tomorrow?"
            ]
          },
          "suggested_agents": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/SuggestedAgent"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Suggested Agents",
            "description": "The list of suggested agents attached to the message"
          }
        },
        "type": "object",
        "title": "AgentSuggestionChatMessage"
      },
      "SuggestedAgent": {
        "properties": {
          "explanation": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Explanation",
            "description": "The explanation of why the agent is useful for the company"
          },
          "agent_description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Agent Description",
            "description": "The description of what the agent does"
          },
          "department": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Department",
            "description": "The department the agent is for"
          },
          "input_specifications": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Input Specifications",
            "description": "A description of what the agent input is"
          },
          "output_specifications": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Output Specifications",
            "description": "A description of what the agent output is"
          }
        },
        "type": "object",
        "title": "SuggestedAgent"
      }
    },
    "securitySchemes": {
      "HTTPBearer": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  },
  "tags": [
    {
      "name": "Agents"
    },
    {
      "name": "Agent Schemas"
    },
    {
      "name": "Runs"
    },
    {
      "name": "Examples"
    },
    {
      "name": "Agent Groups"
    },
    {
      "name": "Organizations"
    },
    {
      "name": "Models"
    },
    {
      "name": "Monitoring"
    },
    {
      "name": "Transcriptions"
    },
    {
      "name": "API Keys"
    },
    {
      "name": "Payments"
    },
    {
      "name": "New Tool Agent"
    }
  ]
}

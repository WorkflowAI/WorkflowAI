ENV_NAME=local

# ------------------------------------------------------------------------------
# Client side environment variables

# ================
# API
NEXT_PUBLIC_WORKFLOWAI_API_URL=http://localhost:8000
# Use if you need the next js server side to use a different API URL than the client side
# WORKFLOWAI_API_URL=
# Key used to sign the JWT Tokens, Required if not using Clerk
# The provided key is for testing only, do not use it in production
# Use openssl to generate a new key and copy it to the clipboard
# openssl ecparam -genkey -name prime256v1 -noout | openssl pkcs8 -topk8 -nocrypt | base64 | pbcopy
WORKFLOWAI_API_SIGN_KEY=LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JR0hBZ0VBTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEJHMHdhd0lCQVFRZ3NlbEtGZzVWZTBNMy8xL1gKTlI4alQ4cEMrYnFXZUxpOG9oVkJKT0orWUN1aFJBTkNBQVFwUWxoenU5WVBGR2ZMbWNDMzVUaHZ6UzJFSldlRQpOTXZTeEY4QVhpK250ZCtMcGJrL05qZ3hBMFZsRGllQzVJTllvOG5LMTQ5WU9kbjBKMlk4VnZhdAotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tCg==


# ================
# Authentication

# Disables authentication entirele, use with caution
NEXT_PUBLIC_DISABLE_AUTHENTICATION=true
# Hardcode a tenant, use if either disabling authentication or want to have all users in a single tenant without
# using Clerk organizations. When not using organizations, all users will be in their own tenants by default.
# Defaults to workflowai if authentication is disabled
# NEXT_PUBLIC_HARDCODED_TENANT=mememe

# Not required if NEXT_PUBLIC_DISABLE_AUTHENTICATION is true
# NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=
# CLERK_SECRET_KEY=

# ================
# Misc

# Set to false to allow runs for no credits.
# Any other value will block runs for no credits.
BLOCK_RUN_FOR_NO_CREDITS=false
# Set to anything but true to disable moderation
MODERATION_ENABLED=false

# ================
# Stripe key, if not provided payment is disabled
# NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=

# ================
# Sentry

SENTRY_DISABLED=true
# SENTRY_AUTH_TOKEN=
# NEXT_PUBLIC_SENTRY_DSN=
# RELEASE_NAME=

# ================
# Amplitude

# If not provided, analytics will be disabled
# NEXT_PUBLIC_AMPLITUDE_API_KEY=

# ------------------------------------------------------------------------------
# API side environment variables

# ================
# WorkflowAI SDK

# The API uses workflowai internally for its agents
WORKFLOWAI_API_URL=http://localhost:8000
# Generate a new key at http://localhost:3000/organization/settings/api-keys
WORKFLOWAI_API_KEY=

# ================
# ClickHouse

# Default clickhouse connection string, uses the default user and no password to connect to
# the local dockerized server. If not provided, the API stores runs in mongodb
CLICKHOUSE_CONNECTION_STRING=http://default:admin@localhost:8123/default

# ================
# MongoDB

# Defaults to the local mongo instance (docker-compose up mongo -d)
# Switch to use a remote connection string if needed
WORKFLOWAI_MONGO_CONNECTION_STRING=mongodb://admin:admin@localhost:27017/workflowai?ssl=false
WORKFLOWAI_MONGO_MIGRATIONS_ON_START=true

# ================
# Redis

# Defaults to the local redis instance (docker-compose up redis -d)
# Switch to use a remote connection string if needed
JOBS_BROKER_URL=redis://localhost:6379/0

# ================
# S3 Storage

# A local minio instance is used for testing, see docker-compose.yml
WORKFLOWAI_STORAGE_CONNECTION_STRING=s3://minio:miniosecret@localhost:9000/workflowai-task-runs?secure=false

# If using Azurite
# Not a secret, see https://github.com/Azure/Azurite?tab=readme-ov-file#connection-strings
# This points to the docker container used for testing that replicates Azure Blob Storage
# WORKFLOWAI_STORAGE_CONNECTION_STRING=DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1;

# ================
# Allowed origins

# Add the allowed origins for the frontend, seperated by commas
WORKFLOWAI_ALLOWED_ORIGINS=*

# ================
# Storage encryption keys, used to encrypt provider configs

# Safe to use for development
# Custom keys should be used in production, it is possible to generate using `openssl rand -base64 32`
STORAGE_AES=ruQBOB/yrSJYw+hozAGewJx5KAadHAMPnATttB2dmig=
STORAGE_HMAC=ATWcst2v/c/KEypN99ujwOySMzpwCqdaXvHLGDqBt+c=

# ================
# Authentication

# For authentication, either use a JWKS URL or a JWK
# JWKS URL will fetch public keys from the app, requires the app to be working
# WORKFLOWAI_JWKS_URL=http://0.0.0.0:3000/api/jwt/jwks
# Or use the encoded JWK directly
WORKFLOWAI_JWK=eyJrdHkiOiJFQyIsIngiOiJLVUpZYzd2V0R4Um55NW5BdC1VNGI4MHRoQ1ZuaERUTDBzUmZBRjR2cDdVIiwieSI6IjM0dWx1VDgyT0RFRFJXVU9KNExrZzFpanljclhqMWc1MmZRblpqeFc5cTAiLCJjcnYiOiJQLTI1NiIsImlkIjoiMSJ9Cg==

# ================
# Extra dependencies, Tools, etc


# FIRECRAWL_API_KEY=
# SERPER_API_KEY=
# SCRAPINGBEE_API_KEY=
# PERPLEXITY_API_KEY=
# ENRICH_SO_API_KEY=
# Sending emails with loops https://loops.so
# LOOPS_API_KEY=
# STRIPE_API_KEY=
# STRIPE_WEBHOOK_SECRET=

# ================
# Provider specific variables
# 
# Providers have a `from_env` classmethod that loads
# the provider specific variables from the environment.

# OpenAI
# Get your OpenAI API key from https://platform.openai.com/settings/organization/api-keys
# OPENAI_API_KEY=

# Anthropic
# Get your Anthropic API key from https://console.anthropic.com/settings/keys
# ANTHROPIC_API_KEY=

# Groq
# Get your Groq API key from https://console.groq.com/keys
# GROQ_API_KEY=

# X AI
# Get your X AI API key from https://console.x.ai
# XAI_API_KEY=

# Google Vertex AI
# For more info about how to set up a Google Vertex AI project and obtraining the creadentials for it, see the link below:
# https://cloud.google.com/vision-ai/docs/cloud-environment
# GOOGLE_VERTEX_AI_PROJECT_ID=
# The locations where the models are available, seperated by commas. "us-central1,us-east1,..."
# GOOGLE_VERTEX_AI_LOCATION=
# The content of the credentials json that can be downloaded from the Google Cloud Console
# GOOGLE_VERTEX_AI_CREDENTIALS=

# AWS Bedrock
# The secret key for the AWS account
# AWS_BEDROCK_SECRET_KEY=
# The access key for the AWS account
# AWS_BEDROCK_ACCESS_KEY=
# [Optional] model/region configuration
# A map of model names to their region.
# AWS_BEDROCK_MODEL_REGION_MAP=
# The default region for when the model is not specified in AWS_BEDROCK_MODEL_REGION_MAP
# AWS_BEDROCK_DEFAULT_REGION=
# An override map of model names to their resource id. See amazon_bedrock_config.py for the default values
# AWS_BEDROCK_RESOURCE_ID_MODEL_MAP=

# Mistral
# Get your Mistral API key from https://console.mistral.ai/api-keys/
# MISTRAL_API_KEY=

# Google Gemini
# Get your Google Gemini API key from https://aistudio.google.com/app/apikey
# GEMINI_API_KEY=

# Azure
# A json encoded AzureOpenAIConfig object
# Configuration can be quite complex since it is possible to have multiple regions and deployments
# AZURE_OPENAI_CONFIG= 

# Fireworks
# Get your Fireworks API key from https://fireworks.ai/account/api-keys
# FIREWORKS_API_KEY=
